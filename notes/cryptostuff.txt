### Address creation process with openssl
#Generate private key
openssl ecparam -name secp256k1 -genkey > priv.pem
cat priv.pem
-----BEGIN EC PARAMETERS-----
BgUrgQQACg==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIAmN/i5NHKltqBDn3h27+UXltSllC4yuKlnQRcmMjJbJoAcGBSuBBAAK
oUQDQgAEVUGhOFGjdCSJ/d3u8hvhPBq7heBTIiwNvzcDuiGNwfMnBZZ67BzFEYyS
DIPQuoFC3OHutNjtUxwVLI/4Xy2LMw==
-----END EC PRIVATE KEY-----


#Extract it in hex form
privhex=`openssl ec -in priv.pem -outform DER|tail -c +8|head -c 32|xxd -p -c 32`

#Get the uncompressed public key
ucpubhex=`openssl ec -in priv.pem -pubout -outform DER|tail -c 65|xxd -p -c 65`

#Get the compressed public key
lastbyte=`echo ${ucpubhex:128}|tr [a-f] [A-F]` 
lastbyte=`echo "ibase=16; $lastbyte" | bc`
prefix=`if [ $((lastbyte % 2)) == 0 ] ; then echo "02"; else echo "03"; fi`

pubhex=$prefix${ucpubhex:2:64}


# SHA256(pubkey)
printf $pubhex| xxd -r -p|openssl dgst -sha256

# RIPEMD160(SHA256(pubkey))
printf $pubhex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160

dd if=/dev/zero bs=1 count=1 > ripemd160.dat

printf $pubhex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160 -binary >> ripemd160.dat

#Checksum of prefix+ripemd160
cat ripemd160.dat | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | head -c 4 > checksum.dat

cat ripemd160.dat checksum.dat | base58


# All in one go:
export pubhex
export pkhhex=`printf $pubhex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160 -binary | xxd -p`
export vpkhhex=00$pkhhex
export checksumhex=`printf $vpkhhex|xxd -r -p|openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | head -c 4 | xxd -p`
export address=`printf $vpkhhex$checksumhex|xxd -r -p|base58`
echo $address

# Make a p2sh address for p2wpkh
export pubhex
export pkhhex=`printf $pubhex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160 -binary | xxd -p`
export redeemscripthex=0014$pkhhex
export scripthashhex=`printf $redeemscripthex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160 -binary | xxd -p`
export prefix=05
export checksumhex=`printf $prefix$scripthashhex|xxd -r -p|openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | head -c 4 | xxd -p`
export address=`printf $prefix$scripthashhex$checksumhex|xxd -r -p|base58`
echo $address

#Encrypt a message with the public key:
electrum encrypt -w ~/.electrum/wallets/grokking_bitcoin_test \
    035541a13851a3742489fdddeef21be13c1abb85e053222c0dbf3703ba218dc1f3 \
    "Ken, will you marry me? /Barbie"

# Sign a message with the private key
electrum signmessage -v -w ~/.electrum/wallets/grokking_bitcoin_test \
    19g6oo8foQF5jfqK9gH2bLkFNwgCenRBPD \
    "Alice, I will marry you! /Bob"

### Decode an address
# Base58 decode
echo 19g6oo8foQF5jfqL9gH2bLkFNwgCenRBPD | base58 -d | xxd -p
005f2613791b36f667fdb8ec0e60f65a5b5f0e04d30c3c1e60

# Get the versioned public key hash
echo 19g6oo8foQF5jfqL9gH2bLkFNwgCenRBPD | base58 -d | head -c 21 | xxd -p
005f2613791b36f667fdb8ec0e60f65a5b5f0e04d3

# Get the checksum
echo 19g6oo8foQF5jfqL9gH2bLkFNwgCenRBPD | base58 -d | tail -c 4 | xxd -p
0c3c1e60

# Calculate the checksum from public key hash
echo 19g6oo8foQF5jfqL9gH2bLkFNwgCenRBPD | base58 -d | head -c 21 \
        | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | head -c 4 | xxd -p


Generate 10 keypairs and output "privkey pubkey"

for i in `seq 10`; do
openssl ecparam -name secp256k1 -genkey > privtemp.pem
privhex=`openssl ec -in privtemp.pem -outform DER 2>/dev/null |tail -c +8|head -c 32|xxd -p -c 32`
ucpubhex=`openssl ec -in privtemp.pem -pubout -outform DER 2>/dev/null|tail -c 65|xxd -p -c 65`
lastbyte=`echo ${ucpubhex:128}|tr [a-f] [A-F]` 
lastbyte=`echo "ibase=16; $lastbyte" | bc`
prefix=`if [ $((lastbyte % 2)) == 0 ] ; then echo "02"; else echo "03"; fi`
pubhex=$prefix${ucpubhex:2:64}
echo $privhex 
echo $pubhex
done

# Convert hex to decimal
echo "ibase=16; `echo 1a |tr [a-f] [A-F]`"|bc


# Convert hex to binary digits
echo "dee6a5d375827436ee4b47a930160457901dce84ff0fac58bf79ab0edb479561" \
| xxd -r -p | xxd -ps -b -c 256

# Convert raw private key to .pem
cd keyconversion
node encoder.js 098dfe2e4d1ca96da810e7de1dbbf945e5b529650b8cae2a59d045c98c8c96c9
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIAmN/i5NHKltqBDn3h27+UXltSllC4yuKlnQRcmMjJbJoAcGBSuBBAAK
oUQDQgAEVUGhOFGjdCSJ/d3u8hvhPBq7heBTIiwNvzcDuiGNwfMnBZZ67BzFEYyS
DIPQuoFC3OHutNjtUxwVLI/4Xy2LMw==
-----END EC PRIVATE KEY-----


# base58 division
x=2333040184766738101355977925681426545668075806022526574176
while [ "$x" != "0" ]; do \
	printf "`echo "$x / 58" | bc` "; \
	printf "`echo "$x % 58" | bc`\n"; \
        x=`echo "$x / 58" |bc`; \
done

