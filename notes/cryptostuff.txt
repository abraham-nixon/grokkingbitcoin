### Address creation process with openssl
#Generate private key
openssl ecparam -name secp256k1 -genkey > priv.pem
cat priv.pem
-----BEGIN EC PARAMETERS-----
BgUrgQQACg==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIAmN/i5NHKltqBDn3h27+UXltSllC4yuKlnQRcmMjJbJoAcGBSuBBAAK
oUQDQgAEVUGhOFGjdCSJ/d3u8hvhPBq7heBTIiwNvzcDuiGNwfMnBZZ67BzFEYyS
DIPQuoFC3OHutNjtUxwVLI/4Xy2LMw==
-----END EC PRIVATE KEY-----


#Extract it in hex form
privhex=`openssl ec -in priv.pem -outform DER|tail -c +8|head -c 32|xxd -p -c 32`

#Get the uncompressed public key
ucpubhex=`openssl ec -in priv.pem -pubout -outform DER|tail -c 65|xxd -p -c 65`

#Get the compressed public key
lastbyte=`echo ${ucpubhex:128}|tr [a-f] [A-F]` 
lastbyte=`echo "ibase=16; $lastbyte" | bc`
prefix=`if [ $((lastbyte % 2)) == 0 ] ; then echo "02"; else echo "03"; fi`

pubhex=$prefix${ucpubhex:2:64}


# SHA256(pubkey)
printf $pubhex| xxd -r -p|openssl dgst -sha256

# RIPEMD160(SHA256(pubkey))
printf $pubhex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160

dd if=/dev/zero bs=1 count=1 > ripemd160.dat

printf $pubhex| xxd -r -p|openssl dgst -sha256 -binary| openssl rmd160 -binary >> ripemd160.dat

#Checksum of prefix+ripemd160
cat ripemd160.dat | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | head -c 4 > checksum.dat

cat ripemd160.dat checksum.dat | base58


#Encrypt a message with the public key:
electrum encrypt -w ~/.electrum/wallets/grokking_bitcoin_test \
    035541a13851a3742489fdddeef21be13c1abb85e053222c0dbf3703ba218dc1f3 \
    "Ken, will you marry me? /Barbie"

# Sign a message with the private key
electrum signmessage -v -w ~/.electrum/wallets/grokking_bitcoin_test \
    19g6oo8foQF5jfqK9gH2bLkFNwgCenRBPD \
    "Alice, I will marry you! /Bob"

