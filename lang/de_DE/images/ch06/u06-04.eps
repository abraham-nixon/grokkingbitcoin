%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: u06-04.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Volker Herminghaus
%%CreationDate: 12/1/19
%%BoundingBox: 0 0 313 214
%%HiResBoundingBox: 0 0 312.4121 213.0732
%%CropBox: 0 0 312.4121 213.0732
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2019-12-01T22:31:41+05:00</xap:CreateDate>
         <xap:ModifyDate>2019-12-01T22:31:41+05:00</xap:ModifyDate>
         <xap:MetadataDate>2019-12-01T22:31:41+05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqxa/0PRdV87SLqmn21+sWmxGIXMMcwUtPJXjzDUrTFWN3vk3yub/z&#xA;HHBolqGiltRAtvZWzyKGhjLemkihN6muW4gL3Zw5pV/gzTP+rLP/ANwvTcyqh/R+1t9Pkn+m+TPK&#xA;R80WsMmh2JQ6W7vHJaW4q4liHJlC8eW56Zhz5tMks80/lRfP5pudT8u6P5fOnXekppv1W8i9P0bn&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D491C4BF0015EA11A9E1B538B1E7E154</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5283727E0115EA11A9E1B538B1E7E154</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D391C4BF0015EA11A9E1B538B1E7E154</stRef:instanceID>
            <stRef:documentID>uuid:D291C4BF0015EA11A9E1B538B1E7E154</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Humanist521BT-BoldCondensed</stFnt:fontName>
                  <stFnt:fontFamily>Humanst521 Cn BT</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.01 emb4-OT</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Bitstream - Humanst521 Cn BT  Bold.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -213.073 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 213.073 li
312.412 213.073 li
312.412 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
207.209 0.453125 mo
217.209 0.453125 li
217.209 7.65625 li
207.209 7.65625 li
207.209 0.453125 li
cp
clp
210.85 -0.437988 mo
211.318 -0.969238 211.818 -1.21924 212.443 -1.21924 cv
213.037 -1.21924 213.568 -0.969238 214.006 -0.469238 cv
214.443 0.03125 214.662 0.84375 214.662 1.93799 cv
214.662 3 214.412 3.78125 213.975 4.31201 cv
213.537 4.84375 213.006 5.125 212.381 5.125 cv
211.631 5.125 211.037 4.75 210.6 4.03076 cv
210.318 3.59375 210.193 2.875 210.193 1.875 cv
210.193 0.875 210.412 0.09375 210.85 -0.437988 cv
210.85 -0.437988 li
cp
210.193 5.06201 mo
210.756 5.875 211.537 6.28076 212.506 6.28076 cv
213.475 6.28076 214.318 5.875 215.037 5.09375 cv
215.725 4.34375 216.1 3.21875 216.1 1.81201 cv
216.1 1.21875 216.006 0.655762 215.818 0.125 cv
215.662 -0.375 215.443 -0.844238 215.131 -1.21924 cv
214.85 -1.59424 214.475 -1.875 214.037 -2.09424 cv
213.568 -2.28125 213.068 -2.375 212.568 -2.375 cv
211.662 -2.375 210.881 -2.03125 210.287 -1.28125 cv
210.287 -5.375 li
208.881 -5.375 li
208.881 6.09375 li
210.193 6.09375 li
210.193 5.06201 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.745098 0.709804 0.662745 0.796078 cmyk
f
grestore
gsave
217.209 0.453125 mo
219.209 0.453125 li
219.209 7.65625 li
217.209 7.65625 li
217.209 0.453125 li
cp
clp
217.779 -5.375 mo
219.185 -5.375 li
219.185 6.09375 li
217.779 6.09375 li
217.779 -5.375 li
cp
false sop
0.745098 0.709804 0.662745 0.796078 cmyk
f
grestore
gsave
219.209 0.453125 mo
229.209 0.453125 li
229.209 7.65625 li
219.209 7.65625 li
219.209 0.453125 li
cp
clp
222.982 -0.437988 mo
223.42 -0.969238 224.014 -1.21924 224.701 -1.21924 cv
225.42 -1.21924 225.982 -0.969238 226.451 -0.437988 cv
226.92 0.09375 227.17 0.875 227.17 1.90625 cv
227.17 3 226.92 3.78125 226.451 4.31201 cv
225.982 4.84375 225.42 5.125 224.701 5.125 cv
224.014 5.125 223.42 4.875 222.982 4.34375 cv
222.514 3.81201 222.264 3 222.264 1.93799 cv
222.264 0.905762 222.514 0.09375 222.982 -0.437988 cv
222.982 -0.437988 li
cp
221.889 5.15576 mo
222.607 5.90576 223.545 6.28076 224.701 6.28076 cv
225.451 6.28076 226.107 6.09375 226.732 5.75 cv
227.326 5.40576 227.795 4.96875 228.107 4.34375 cv
228.451 3.71875 228.607 2.90576 228.607 1.81201 cv
228.607 0.5 228.232 -0.5 227.514 -1.28125 cv
226.795 -2.03125 225.857 -2.375 224.701 -2.375 cv
223.701 -2.375 222.826 -2.09424 222.107 -1.46875 cv
221.264 -0.71875 220.826 0.40625 220.826 1.93799 cv
220.826 3.34375 221.17 4.40576 221.889 5.15576 cv
221.889 5.15576 li
cp
false sop
0.745098 0.709804 0.662745 0.796078 cmyk
f
grestore
gsave
229.209 0.453125 mo
237.209 0.453125 li
237.209 7.65625 li
229.209 7.65625 li
229.209 0.453125 li
cp
clp
234.975 4.59375 mo
234.6 4.93799 234.131 5.125 233.6 5.125 cv
232.912 5.125 232.35 4.875 231.912 4.375 cv
231.475 3.84375 231.287 3.06201 231.287 1.93799 cv
231.287 0.84375 231.506 0.03125 231.943 -0.469238 cv
232.381 -0.969238 232.943 -1.21924 233.662 -1.21924 cv
234.131 -1.21924 234.537 -1.09375 234.881 -0.812012 cv
235.193 -0.53125 235.443 -0.125 235.568 0.437988 cv
236.912 0.25 li
236.756 -0.594238 236.381 -1.25 235.818 -1.68799 cv
235.256 -2.15625 234.506 -2.375 233.6 -2.375 cv
232.912 -2.375 232.225 -2.21875 231.631 -1.875 cv
231.037 -1.56201 230.568 -1.03125 230.287 -0.375 cv
229.975 0.312012 229.818 1.09375 229.818 1.96875 cv
229.818 3.34375 230.193 4.40576 230.881 5.15576 cv
231.568 5.90576 232.475 6.28076 233.6 6.28076 cv
234.506 6.28076 235.287 6 235.912 5.46875 cv
236.506 4.93799 236.912 4.18799 237.037 3.25 cv
235.662 3.06201 li
235.568 3.75 235.35 4.28076 234.975 4.59375 cv
234.975 4.59375 li
cp
false sop
0.745098 0.709804 0.662745 0.796078 cmyk
f
grestore
gsave
237.209 0.453125 mo
245.209 0.453125 li
245.209 7.65625 li
237.209 7.65625 li
237.209 0.453125 li
cp
clp
239.662 6.09375 mo
239.662 2.81201 li
240.631 1.84375 li
243.412 6.09375 li
245.131 6.09375 li
241.631 0.875 li
244.818 -2.21875 li
242.975 -2.21875 li
239.662 1.15625 li
239.662 -5.375 li
238.256 -5.375 li
238.256 6.09375 li
239.662 6.09375 li
cp
false sop
0.745098 0.709804 0.662745 0.796078 cmyk
f
grestore
244.943 8.28125 mo
254.255 8.28125 li
254.255 9.28125 li
244.943 9.28125 li
244.943 8.28125 li
cp
false sop
0.745098 0.709804 0.662745 0.796078 cmyk
f
gsave
255.209 0.453125 mo
261.209 0.453125 li
261.209 7.65625 li
255.209 7.65625 li
255.209 0.453125 li
cp
clp
260.029 -5.40625 mo
259.123 -5.40625 li
258.904 -4.90625 258.467 -4.40625 257.873 -3.875 cv
257.279 -3.34375 256.592 -2.90625 255.811 -2.53125 cv
255.811 -1.15625 li
256.248 -1.34424 256.748 -1.59424 257.311 -1.90625 cv
257.842 -2.21875 258.311 -2.53125 258.623 -2.875 cv
258.623 6.09375 li
260.029 6.09375 li
260.029 -5.40625 li
cp
f
grestore
gsave
263.209 0.453125 mo
271.209 0.453125 li
271.209 7.65625 li
263.209 7.65625 li
263.209 0.453125 li
cp
clp
268.982 0.280762 mo
268.576 0.71875 268.014 0.96875 267.389 0.96875 cv
266.732 0.96875 266.17 0.71875 265.764 0.280762 cv
265.326 -0.187988 265.107 -0.78125 265.107 -1.5 cv
265.107 -2.31201 265.326 -2.96875 265.795 -3.46924 cv
266.232 -4 266.795 -4.25 267.42 -4.25 cv
268.014 -4.25 268.545 -4 268.951 -3.53125 cv
269.389 -3.06201 269.607 -2.40625 269.607 -1.625 cv
269.607 -0.812012 269.389 -0.187988 268.982 0.280762 cv
268.982 0.280762 li
cp
264.889 5.53076 mo
265.451 6.03125 266.17 6.28076 267.076 6.28076 cv
267.92 6.28076 268.67 6.06201 269.295 5.625 cv
269.92 5.15576 270.389 4.5 270.701 3.625 cv
271.014 2.78076 271.17 1.59375 271.17 0.125 cv
271.17 -1.28125 271.014 -2.34424 270.701 -3.09424 cv
270.389 -3.84424 269.92 -4.40625 269.295 -4.81201 cv
268.67 -5.18799 267.982 -5.40625 267.264 -5.40625 cv
266.201 -5.40625 265.357 -5.06201 264.67 -4.34424 cv
263.982 -3.625 263.67 -2.71924 263.67 -1.53125 cv
263.67 -0.40625 263.982 0.5 264.639 1.18799 cv
265.295 1.875 266.076 2.21875 267.045 2.21875 cv
267.607 2.21875 268.139 2.06201 268.607 1.78076 cv
269.107 1.5 269.482 1.15625 269.764 0.687988 cv
269.764 0.84375 269.795 0.905762 269.795 0.96875 cv
269.795 1.56201 269.701 2.15576 269.545 2.68799 cv
269.42 3.25 269.264 3.71875 269.045 4.03076 cv
268.826 4.375 268.576 4.625 268.232 4.84375 cv
267.92 5.03076 267.545 5.125 267.107 5.125 cv
266.607 5.125 266.17 5 265.857 4.68799 cv
265.545 4.40576 265.326 3.96875 265.201 3.31201 cv
263.857 3.43799 li
263.982 4.34375 264.295 5.03076 264.889 5.53076 cv
264.889 5.53076 li
cp
f
grestore
273.35 4.5 mo
274.944 4.5 li
274.944 6.09424 li
273.35 6.09424 li
273.35 4.5 li
cp
f
gsave
275.209 0.453125 mo
285.209 0.453125 li
285.209 7.65625 li
275.209 7.65625 li
275.209 0.453125 li
cp
clp
278.928 -0.437988 mo
279.365 -0.969238 279.865 -1.21924 280.521 -1.21924 cv
281.146 -1.21924 281.678 -0.937988 282.115 -0.40625 cv
282.553 0.125 282.771 0.937988 282.771 2.06201 cv
282.771 3.09375 282.584 3.875 282.146 4.375 cv
281.709 4.875 281.178 5.125 280.553 5.125 cv
279.959 5.125 279.428 4.875 278.959 4.34375 cv
278.521 3.81201 278.303 3 278.303 1.93799 cv
278.303 0.875 278.521 0.0620117 278.928 -0.437988 cv
278.928 -0.437988 li
cp
284.053 6.09375 mo
284.053 -5.375 li
282.646 -5.375 li
282.646 -1.21924 li
282.428 -1.59424 282.084 -1.84375 281.709 -2.06201 cv
281.303 -2.28125 280.865 -2.375 280.365 -2.375 cv
279.678 -2.375 279.084 -2.21875 278.521 -1.84375 cv
277.959 -1.5 277.553 -0.969238 277.271 -0.312012 cv
277.021 0.375 276.865 1.125 276.865 1.93799 cv
276.865 2.81201 277.021 3.56201 277.334 4.21875 cv
277.615 4.84375 278.053 5.34375 278.615 5.71875 cv
279.178 6.09375 279.771 6.28076 280.428 6.28076 cv
281.459 6.28076 282.209 5.84375 282.74 5.03076 cv
282.74 6.09375 li
284.053 6.09375 li
cp
f
grestore
gsave
285.209 0.453125 mo
295.209 0.453125 li
295.209 7.65625 li
285.209 7.65625 li
285.209 0.453125 li
cp
clp
291.6 2.43799 mo
291.6 3.06201 291.506 3.53076 291.35 3.84375 cv
291.162 4.25 290.85 4.56201 290.412 4.81201 cv
290.006 5.06201 289.537 5.15576 288.975 5.15576 cv
288.412 5.15576 288.006 5.03076 287.725 4.81201 cv
287.443 4.53125 287.318 4.25 287.318 3.84375 cv
287.318 3.625 287.381 3.375 287.506 3.18799 cv
287.631 3 287.818 2.84375 288.068 2.71875 cv
288.287 2.625 288.725 2.53076 289.287 2.46875 cv
290.318 2.31201 291.068 2.15576 291.6 1.93799 cv
291.6 2.43799 li
cp
291.975 6.09375 mo
293.443 6.09375 li
293.287 5.78076 293.162 5.43799 293.1 5.09375 cv
293.037 4.75 293.006 3.90576 293.006 2.625 cv
293.006 0.75 li
293.006 0.125 293.006 -0.312012 292.943 -0.53125 cv
292.85 -0.937988 292.725 -1.25 292.506 -1.5 cv
292.287 -1.75 291.975 -1.96924 291.537 -2.125 cv
291.068 -2.31201 290.506 -2.375 289.787 -2.375 cv
289.068 -2.375 288.443 -2.28125 287.912 -2.09424 cv
287.381 -1.875 286.943 -1.625 286.662 -1.25 cv
286.381 -0.90625 286.162 -0.40625 286.037 0.187988 cv
287.412 0.375 li
287.568 -0.219238 287.787 -0.65625 288.131 -0.875 cv
288.443 -1.09375 288.912 -1.21924 289.6 -1.21924 cv
290.287 -1.21924 290.85 -1.06201 291.193 -0.75 cv
291.475 -0.5 291.6 -0.125 291.6 0.46875 cv
291.6 0.5 291.6 0.625 291.6 0.84375 cv
291.037 1.03076 290.225 1.18799 289.068 1.31201 cv
288.506 1.375 288.1 1.46875 287.818 1.53125 cv
287.443 1.625 287.1 1.78076 286.818 1.96875 cv
286.506 2.18799 286.256 2.46875 286.068 2.81201 cv
285.912 3.125 285.787 3.5 285.787 3.90576 cv
285.787 4.59375 286.037 5.15576 286.537 5.59375 cv
287.037 6.03125 287.725 6.28076 288.662 6.28076 cv
289.193 6.28076 289.725 6.18799 290.193 6 cv
290.693 5.81201 291.162 5.5 291.693 5.06201 cv
291.756 5.46875 291.818 5.78076 291.975 6.09375 cv
291.975 6.09375 li
cp
f
grestore
gsave
293.209 0.453125 mo
299.209 0.453125 li
299.209 7.65625 li
293.209 7.65625 li
293.209 0.453125 li
cp
clp
297.623 4.90625 mo
297.404 4.90625 297.248 4.875 297.154 4.81201 cv
297.029 4.71875 296.967 4.625 296.904 4.5 cv
296.873 4.40576 296.842 4.15625 296.842 3.75 cv
296.842 -1.125 li
298.248 -1.125 li
298.248 -2.21875 li
296.842 -2.21875 li
296.842 -5.09424 li
295.404 -4.25 li
295.404 -2.21875 li
294.373 -2.21875 li
294.373 -1.125 li
295.404 -1.125 li
295.404 3.65576 li
295.404 4.5 295.498 5.06201 295.592 5.31201 cv
295.717 5.59375 295.904 5.81201 296.186 5.96875 cv
296.467 6.125 296.873 6.21875 297.373 6.21875 cv
297.686 6.21875 298.029 6.15576 298.436 6.06201 cv
298.248 4.84375 li
297.967 4.875 297.779 4.90625 297.623 4.90625 cv
297.623 4.90625 li
cp
f
grestore
210.85 39.5474 mo
211.318 39.0151 211.818 38.7651 212.443 38.7651 cv
213.037 38.7651 213.568 39.0151 214.006 39.5151 cv
214.443 40.0151 214.662 40.8281 214.662 41.9224 cv
214.662 42.9844 214.412 43.7651 213.975 44.2974 cv
213.537 44.8281 213.006 45.1094 212.381 45.1094 cv
211.631 45.1094 211.037 44.7344 210.6 44.0151 cv
210.318 43.5781 210.193 42.8594 210.193 41.8594 cv
210.193 40.8594 210.412 40.0781 210.85 39.5474 cv
210.85 39.5474 li
cp
210.193 45.0474 mo
210.756 45.8594 211.537 46.2651 212.506 46.2651 cv
213.475 46.2651 214.318 45.8594 215.037 45.0781 cv
215.725 44.3281 216.1 43.2031 216.1 41.7974 cv
216.1 41.2031 216.006 40.6401 215.818 40.1094 cv
215.662 39.6094 215.443 39.1401 215.131 38.7651 cv
214.85 38.3901 214.475 38.1094 214.037 37.8901 cv
213.568 37.7031 213.068 37.6094 212.568 37.6094 cv
211.662 37.6094 210.881 37.9531 210.287 38.7031 cv
210.287 34.6094 li
208.881 34.6094 li
208.881 46.0781 li
210.193 46.0781 li
210.193 45.0474 li
cp
f
217.779 34.6094 mo
219.185 34.6094 li
219.185 46.0781 li
217.779 46.0781 li
217.779 34.6094 li
cp
f
222.982 39.5474 mo
223.42 39.0151 224.014 38.7651 224.701 38.7651 cv
225.42 38.7651 225.982 39.0151 226.451 39.5474 cv
226.92 40.0781 227.17 40.8594 227.17 41.8901 cv
227.17 42.9844 226.92 43.7651 226.451 44.2974 cv
225.982 44.8281 225.42 45.1094 224.701 45.1094 cv
224.014 45.1094 223.42 44.8594 222.982 44.3281 cv
222.514 43.7974 222.264 42.9844 222.264 41.9224 cv
222.264 40.8901 222.514 40.0781 222.982 39.5474 cv
222.982 39.5474 li
cp
221.889 45.1401 mo
222.607 45.8901 223.545 46.2651 224.701 46.2651 cv
225.451 46.2651 226.107 46.0781 226.732 45.7344 cv
227.326 45.3901 227.795 44.9531 228.107 44.3281 cv
228.451 43.7031 228.607 42.8901 228.607 41.7974 cv
228.607 40.4844 228.232 39.4844 227.514 38.7031 cv
226.795 37.9531 225.857 37.6094 224.701 37.6094 cv
223.701 37.6094 222.826 37.8901 222.107 38.5151 cv
221.264 39.2651 220.826 40.3901 220.826 41.9224 cv
220.826 43.3281 221.17 44.3901 221.889 45.1401 cv
221.889 45.1401 li
cp
f
234.975 44.5781 mo
234.6 44.9224 234.131 45.1094 233.6 45.1094 cv
232.912 45.1094 232.35 44.8594 231.912 44.3594 cv
231.475 43.8281 231.287 43.0474 231.287 41.9224 cv
231.287 40.8281 231.506 40.0151 231.943 39.5151 cv
232.381 39.0151 232.943 38.7651 233.662 38.7651 cv
234.131 38.7651 234.537 38.8901 234.881 39.1724 cv
235.193 39.4531 235.443 39.8594 235.568 40.4224 cv
236.912 40.2344 li
236.756 39.3901 236.381 38.7344 235.818 38.2974 cv
235.256 37.8281 234.506 37.6094 233.6 37.6094 cv
232.912 37.6094 232.225 37.7651 231.631 38.1094 cv
231.037 38.4224 230.568 38.9531 230.287 39.6094 cv
229.975 40.2974 229.818 41.0781 229.818 41.9531 cv
229.818 43.3281 230.193 44.3901 230.881 45.1401 cv
231.568 45.8901 232.475 46.2651 233.6 46.2651 cv
234.506 46.2651 235.287 45.9844 235.912 45.4531 cv
236.506 44.9224 236.912 44.1724 237.037 43.2344 cv
235.662 43.0474 li
235.568 43.7344 235.35 44.2651 234.975 44.5781 cv
234.975 44.5781 li
cp
f
239.662 46.0781 mo
239.662 42.7974 li
240.631 41.8281 li
243.412 46.0781 li
245.131 46.0781 li
241.631 40.8594 li
244.818 37.7651 li
242.975 37.7651 li
239.662 41.1401 li
239.662 34.6094 li
238.256 34.6094 li
238.256 46.0781 li
239.662 46.0781 li
cp
f
244.943 48.2651 mo
254.255 48.2651 li
254.255 49.2651 li
244.943 49.2651 li
244.943 48.2651 li
cp
f
256.498 44.7344 mo
256.654 44.4844 256.873 44.2344 257.123 43.9531 cv
257.342 43.7344 257.904 43.2344 258.717 42.5151 cv
259.748 41.6724 260.467 41.0151 260.904 40.5151 cv
261.342 40.0151 261.654 39.5474 261.842 39.1094 cv
262.029 38.6724 262.123 38.2344 262.123 37.7651 cv
262.123 36.8594 261.811 36.1094 261.154 35.4844 cv
260.529 34.8901 259.654 34.5781 258.561 34.5781 cv
257.467 34.5781 256.592 34.8594 255.936 35.4224 cv
255.279 35.9844 254.936 36.8281 254.842 37.8901 cv
256.279 38.0151 li
256.279 37.2974 256.467 36.7651 256.904 36.3594 cv
257.279 35.9531 257.842 35.7344 258.529 35.7344 cv
259.154 35.7344 259.686 35.9224 260.092 36.3281 cv
260.498 36.7031 260.686 37.1724 260.686 37.7344 cv
260.686 38.2651 260.467 38.8281 260.029 39.4224 cv
259.592 40.0151 258.717 40.8281 257.498 41.8594 cv
256.686 42.4844 256.092 43.0781 255.654 43.5781 cv
255.217 44.0781 254.936 44.5781 254.717 45.1094 cv
254.592 45.3901 254.529 45.7344 254.561 46.0781 cv
262.154 46.0781 li
262.154 44.7344 li
256.498 44.7344 li
cp
f
265.826 36.5474 mo
266.201 36.0151 266.732 35.7344 267.357 35.7344 cv
268.014 35.7344 268.576 36.0474 269.014 36.6724 cv
269.451 37.2974 269.67 38.5474 269.67 40.4224 cv
269.67 42.3281 269.451 43.5781 269.014 44.2031 cv
268.576 44.8281 268.014 45.1094 267.389 45.1094 cv
266.732 45.1094 266.201 44.8281 265.764 44.2031 cv
265.326 43.5781 265.107 42.3281 265.107 40.4224 cv
265.107 38.5474 265.326 37.2651 265.826 36.5474 cv
265.826 36.5474 li
cp
264.795 45.0781 mo
265.42 45.8594 266.264 46.2651 267.389 46.2651 cv
268.201 46.2651 268.92 46.0474 269.451 45.6094 cv
270.014 45.1401 270.42 44.5151 270.701 43.6724 cv
270.951 42.8594 271.107 41.7651 271.107 40.4224 cv
271.107 39.2974 271.045 38.3901 270.857 37.7344 cv
270.67 37.0474 270.451 36.4844 270.139 36.0151 cv
269.857 35.5474 269.451 35.2031 269.014 34.9531 cv
268.545 34.7031 267.982 34.5781 267.389 34.5781 cv
266.545 34.5781 265.857 34.7974 265.326 35.2344 cv
264.764 35.7031 264.357 36.3281 264.076 37.1401 cv
263.795 37.9844 263.67 39.0781 263.67 40.4224 cv
263.67 42.5781 264.045 44.1401 264.795 45.0781 cv
264.795 45.0781 li
cp
f
273.35 44.4844 mo
274.944 44.4844 li
274.944 46.0781 li
273.35 46.0781 li
273.35 44.4844 li
cp
f
278.928 39.5474 mo
279.365 39.0151 279.865 38.7651 280.521 38.7651 cv
281.146 38.7651 281.678 39.0474 282.115 39.5781 cv
282.553 40.1094 282.771 40.9224 282.771 42.0474 cv
282.771 43.0781 282.584 43.8594 282.146 44.3594 cv
281.709 44.8594 281.178 45.1094 280.553 45.1094 cv
279.959 45.1094 279.428 44.8594 278.959 44.3281 cv
278.521 43.7974 278.303 42.9844 278.303 41.9224 cv
278.303 40.8594 278.521 40.0474 278.928 39.5474 cv
278.928 39.5474 li
cp
284.053 46.0781 mo
284.053 34.6094 li
282.646 34.6094 li
282.646 38.7651 li
282.428 38.3901 282.084 38.1401 281.709 37.9224 cv
281.303 37.7031 280.865 37.6094 280.365 37.6094 cv
279.678 37.6094 279.084 37.7651 278.521 38.1401 cv
277.959 38.4844 277.553 39.0151 277.271 39.6724 cv
277.021 40.3594 276.865 41.1094 276.865 41.9224 cv
276.865 42.7974 277.021 43.5474 277.334 44.2031 cv
277.615 44.8281 278.053 45.3281 278.615 45.7031 cv
279.178 46.0781 279.771 46.2651 280.428 46.2651 cv
281.459 46.2651 282.209 45.8281 282.74 45.0151 cv
282.74 46.0781 li
284.053 46.0781 li
cp
f
291.6 42.4224 mo
291.6 43.0474 291.506 43.5151 291.35 43.8281 cv
291.162 44.2344 290.85 44.5474 290.412 44.7974 cv
290.006 45.0474 289.537 45.1401 288.975 45.1401 cv
288.412 45.1401 288.006 45.0151 287.725 44.7974 cv
287.443 44.5151 287.318 44.2344 287.318 43.8281 cv
287.318 43.6094 287.381 43.3594 287.506 43.1724 cv
287.631 42.9844 287.818 42.8281 288.068 42.7031 cv
288.287 42.6094 288.725 42.5151 289.287 42.4531 cv
290.318 42.2974 291.068 42.1401 291.6 41.9224 cv
291.6 42.4224 li
cp
291.975 46.0781 mo
293.443 46.0781 li
293.287 45.7651 293.162 45.4224 293.1 45.0781 cv
293.037 44.7344 293.006 43.8901 293.006 42.6094 cv
293.006 40.7344 li
293.006 40.1094 293.006 39.6724 292.943 39.4531 cv
292.85 39.0474 292.725 38.7344 292.506 38.4844 cv
292.287 38.2344 291.975 38.0151 291.537 37.8594 cv
291.068 37.6724 290.506 37.6094 289.787 37.6094 cv
289.068 37.6094 288.443 37.7031 287.912 37.8901 cv
287.381 38.1094 286.943 38.3594 286.662 38.7344 cv
286.381 39.0781 286.162 39.5781 286.037 40.1724 cv
287.412 40.3594 li
287.568 39.7651 287.787 39.3281 288.131 39.1094 cv
288.443 38.8901 288.912 38.7651 289.6 38.7651 cv
290.287 38.7651 290.85 38.9224 291.193 39.2344 cv
291.475 39.4844 291.6 39.8594 291.6 40.4531 cv
291.6 40.4844 291.6 40.6094 291.6 40.8281 cv
291.037 41.0151 290.225 41.1724 289.068 41.2974 cv
288.506 41.3594 288.1 41.4531 287.818 41.5151 cv
287.443 41.6094 287.1 41.7651 286.818 41.9531 cv
286.506 42.1724 286.256 42.4531 286.068 42.7974 cv
285.912 43.1094 285.787 43.4844 285.787 43.8901 cv
285.787 44.5781 286.037 45.1401 286.537 45.5781 cv
287.037 46.0151 287.725 46.2651 288.662 46.2651 cv
289.193 46.2651 289.725 46.1724 290.193 45.9844 cv
290.693 45.7974 291.162 45.4844 291.693 45.0474 cv
291.756 45.4531 291.818 45.7651 291.975 46.0781 cv
291.975 46.0781 li
cp
f
297.623 44.8901 mo
297.404 44.8901 297.248 44.8594 297.154 44.7974 cv
297.029 44.7031 296.967 44.6094 296.904 44.4844 cv
296.873 44.3901 296.842 44.1401 296.842 43.7344 cv
296.842 38.8594 li
298.248 38.8594 li
298.248 37.7651 li
296.842 37.7651 li
296.842 34.8901 li
295.404 35.7344 li
295.404 37.7651 li
294.373 37.7651 li
294.373 38.8594 li
295.404 38.8594 li
295.404 43.6401 li
295.404 44.4844 295.498 45.0474 295.592 45.2974 cv
295.717 45.5781 295.904 45.7974 296.186 45.9531 cv
296.467 46.1094 296.873 46.2031 297.373 46.2031 cv
297.686 46.2031 298.029 46.1401 298.436 46.0474 cv
298.248 44.8281 li
297.967 44.8594 297.779 44.8901 297.623 44.8901 cv
297.623 44.8901 li
cp
f
210.85 81.6792 mo
211.318 81.1484 211.818 80.8984 212.443 80.8984 cv
213.037 80.8984 213.568 81.1484 214.006 81.6484 cv
214.443 82.1484 214.662 82.9614 214.662 84.0542 cv
214.662 85.1172 214.412 85.8984 213.975 86.4292 cv
213.537 86.9614 213.006 87.2422 212.381 87.2422 cv
211.631 87.2422 211.037 86.8672 210.6 86.1484 cv
210.318 85.7114 210.193 84.9922 210.193 83.9922 cv
210.193 82.9922 210.412 82.2114 210.85 81.6792 cv
210.85 81.6792 li
cp
210.193 87.1792 mo
210.756 87.9922 211.537 88.3984 212.506 88.3984 cv
213.475 88.3984 214.318 87.9922 215.037 87.2114 cv
215.725 86.4614 216.1 85.3364 216.1 83.9292 cv
216.1 83.3364 216.006 82.7734 215.818 82.2422 cv
215.662 81.7422 215.443 81.2734 215.131 80.8984 cv
214.85 80.5234 214.475 80.2422 214.037 80.0234 cv
213.568 79.8364 213.068 79.7422 212.568 79.7422 cv
211.662 79.7422 210.881 80.0864 210.287 80.8364 cv
210.287 76.7422 li
208.881 76.7422 li
208.881 88.2114 li
210.193 88.2114 li
210.193 87.1792 li
cp
f
217.779 76.7422 mo
219.185 76.7422 li
219.185 88.2114 li
217.779 88.2114 li
217.779 76.7422 li
cp
f
222.982 81.6792 mo
223.42 81.1484 224.014 80.8984 224.701 80.8984 cv
225.42 80.8984 225.982 81.1484 226.451 81.6792 cv
226.92 82.2114 227.17 82.9922 227.17 84.0234 cv
227.17 85.1172 226.92 85.8984 226.451 86.4292 cv
225.982 86.9614 225.42 87.2422 224.701 87.2422 cv
224.014 87.2422 223.42 86.9922 222.982 86.4614 cv
222.514 85.9292 222.264 85.1172 222.264 84.0542 cv
222.264 83.0234 222.514 82.2114 222.982 81.6792 cv
222.982 81.6792 li
cp
221.889 87.2734 mo
222.607 88.0234 223.545 88.3984 224.701 88.3984 cv
225.451 88.3984 226.107 88.2114 226.732 87.8672 cv
227.326 87.5234 227.795 87.0864 228.107 86.4614 cv
228.451 85.8364 228.607 85.0234 228.607 83.9292 cv
228.607 82.6172 228.232 81.6172 227.514 80.8364 cv
226.795 80.0864 225.857 79.7422 224.701 79.7422 cv
223.701 79.7422 222.826 80.0234 222.107 80.6484 cv
221.264 81.3984 220.826 82.5234 220.826 84.0542 cv
220.826 85.4614 221.17 86.5234 221.889 87.2734 cv
221.889 87.2734 li
cp
f
234.975 86.7114 mo
234.6 87.0542 234.131 87.2422 233.6 87.2422 cv
232.912 87.2422 232.35 86.9922 231.912 86.4922 cv
231.475 85.9614 231.287 85.1792 231.287 84.0542 cv
231.287 82.9614 231.506 82.1484 231.943 81.6484 cv
232.381 81.1484 232.943 80.8984 233.662 80.8984 cv
234.131 80.8984 234.537 81.0234 234.881 81.3042 cv
235.193 81.5864 235.443 81.9922 235.568 82.5542 cv
236.912 82.3672 li
236.756 81.5234 236.381 80.8672 235.818 80.4292 cv
235.256 79.9614 234.506 79.7422 233.6 79.7422 cv
232.912 79.7422 232.225 79.8984 231.631 80.2422 cv
231.037 80.5542 230.568 81.0864 230.287 81.7422 cv
229.975 82.4292 229.818 83.2114 229.818 84.0864 cv
229.818 85.4614 230.193 86.5234 230.881 87.2734 cv
231.568 88.0234 232.475 88.3984 233.6 88.3984 cv
234.506 88.3984 235.287 88.1172 235.912 87.5864 cv
236.506 87.0542 236.912 86.3042 237.037 85.3672 cv
235.662 85.1792 li
235.568 85.8672 235.35 86.3984 234.975 86.7114 cv
234.975 86.7114 li
cp
f
239.662 88.2114 mo
239.662 84.9292 li
240.631 83.9614 li
243.412 88.2114 li
245.131 88.2114 li
241.631 82.9922 li
244.818 79.8984 li
242.975 79.8984 li
239.662 83.2734 li
239.662 76.7422 li
238.256 76.7422 li
238.256 88.2114 li
239.662 88.2114 li
cp
f
244.943 90.3984 mo
254.255 90.3984 li
254.255 91.3984 li
244.943 91.3984 li
244.943 90.3984 li
cp
f
256.498 86.8672 mo
256.654 86.6172 256.873 86.3672 257.123 86.0864 cv
257.342 85.8672 257.904 85.3672 258.717 84.6484 cv
259.748 83.8042 260.467 83.1484 260.904 82.6484 cv
261.342 82.1484 261.654 81.6792 261.842 81.2422 cv
262.029 80.8042 262.123 80.3672 262.123 79.8984 cv
262.123 78.9922 261.811 78.2422 261.154 77.6172 cv
260.529 77.0234 259.654 76.7114 258.561 76.7114 cv
257.467 76.7114 256.592 76.9922 255.936 77.5542 cv
255.279 78.1172 254.936 78.9614 254.842 80.0234 cv
256.279 80.1484 li
256.279 79.4292 256.467 78.8984 256.904 78.4922 cv
257.279 78.0864 257.842 77.8672 258.529 77.8672 cv
259.154 77.8672 259.686 78.0542 260.092 78.4614 cv
260.498 78.8364 260.686 79.3042 260.686 79.8672 cv
260.686 80.3984 260.467 80.9614 260.029 81.5542 cv
259.592 82.1484 258.717 82.9614 257.498 83.9922 cv
256.686 84.6172 256.092 85.2114 255.654 85.7114 cv
255.217 86.2114 254.936 86.7114 254.717 87.2422 cv
254.592 87.5234 254.529 87.8672 254.561 88.2114 cv
262.154 88.2114 li
262.154 86.8672 li
256.498 86.8672 li
cp
f
268.92 76.7114 mo
268.014 76.7114 li
267.795 77.2114 267.357 77.7114 266.764 78.2422 cv
266.17 78.7734 265.482 79.2114 264.701 79.5864 cv
264.701 80.9614 li
265.139 80.7734 265.639 80.5234 266.201 80.2114 cv
266.732 79.8984 267.201 79.5864 267.514 79.2422 cv
267.514 88.2114 li
268.92 88.2114 li
268.92 76.7114 li
cp
f
273.35 86.6172 mo
274.944 86.6172 li
274.944 88.2114 li
273.35 88.2114 li
273.35 86.6172 li
cp
f
278.928 81.6792 mo
279.365 81.1484 279.865 80.8984 280.521 80.8984 cv
281.146 80.8984 281.678 81.1792 282.115 81.7114 cv
282.553 82.2422 282.771 83.0542 282.771 84.1792 cv
282.771 85.2114 282.584 85.9922 282.146 86.4922 cv
281.709 86.9922 281.178 87.2422 280.553 87.2422 cv
279.959 87.2422 279.428 86.9922 278.959 86.4614 cv
278.521 85.9292 278.303 85.1172 278.303 84.0542 cv
278.303 82.9922 278.521 82.1792 278.928 81.6792 cv
278.928 81.6792 li
cp
284.053 88.2114 mo
284.053 76.7422 li
282.646 76.7422 li
282.646 80.8984 li
282.428 80.5234 282.084 80.2734 281.709 80.0542 cv
281.303 79.8364 280.865 79.7422 280.365 79.7422 cv
279.678 79.7422 279.084 79.8984 278.521 80.2734 cv
277.959 80.6172 277.553 81.1484 277.271 81.8042 cv
277.021 82.4922 276.865 83.2422 276.865 84.0542 cv
276.865 84.9292 277.021 85.6792 277.334 86.3364 cv
277.615 86.9614 278.053 87.4614 278.615 87.8364 cv
279.178 88.2114 279.771 88.3984 280.428 88.3984 cv
281.459 88.3984 282.209 87.9614 282.74 87.1484 cv
282.74 88.2114 li
284.053 88.2114 li
cp
f
291.6 84.5542 mo
291.6 85.1792 291.506 85.6484 291.35 85.9614 cv
291.162 86.3672 290.85 86.6792 290.412 86.9292 cv
290.006 87.1792 289.537 87.2734 288.975 87.2734 cv
288.412 87.2734 288.006 87.1484 287.725 86.9292 cv
287.443 86.6484 287.318 86.3672 287.318 85.9614 cv
287.318 85.7422 287.381 85.4922 287.506 85.3042 cv
287.631 85.1172 287.818 84.9614 288.068 84.8364 cv
288.287 84.7422 288.725 84.6484 289.287 84.5864 cv
290.318 84.4292 291.068 84.2734 291.6 84.0542 cv
291.6 84.5542 li
cp
291.975 88.2114 mo
293.443 88.2114 li
293.287 87.8984 293.162 87.5542 293.1 87.2114 cv
293.037 86.8672 293.006 86.0234 293.006 84.7422 cv
293.006 82.8672 li
293.006 82.2422 293.006 81.8042 292.943 81.5864 cv
292.85 81.1792 292.725 80.8672 292.506 80.6172 cv
292.287 80.3672 291.975 80.1484 291.537 79.9922 cv
291.068 79.8042 290.506 79.7422 289.787 79.7422 cv
289.068 79.7422 288.443 79.8364 287.912 80.0234 cv
287.381 80.2422 286.943 80.4922 286.662 80.8672 cv
286.381 81.2114 286.162 81.7114 286.037 82.3042 cv
287.412 82.4922 li
287.568 81.8984 287.787 81.4614 288.131 81.2422 cv
288.443 81.0234 288.912 80.8984 289.6 80.8984 cv
290.287 80.8984 290.85 81.0542 291.193 81.3672 cv
291.475 81.6172 291.6 81.9922 291.6 82.5864 cv
291.6 82.6172 291.6 82.7422 291.6 82.9614 cv
291.037 83.1484 290.225 83.3042 289.068 83.4292 cv
288.506 83.4922 288.1 83.5864 287.818 83.6484 cv
287.443 83.7422 287.1 83.8984 286.818 84.0864 cv
286.506 84.3042 286.256 84.5864 286.068 84.9292 cv
285.912 85.2422 285.787 85.6172 285.787 86.0234 cv
285.787 86.7114 286.037 87.2734 286.537 87.7114 cv
287.037 88.1484 287.725 88.3984 288.662 88.3984 cv
289.193 88.3984 289.725 88.3042 290.193 88.1172 cv
290.693 87.9292 291.162 87.6172 291.693 87.1792 cv
291.756 87.5864 291.818 87.8984 291.975 88.2114 cv
291.975 88.2114 li
cp
f
297.623 87.0234 mo
297.404 87.0234 297.248 86.9922 297.154 86.9292 cv
297.029 86.8364 296.967 86.7422 296.904 86.6172 cv
296.873 86.5234 296.842 86.2734 296.842 85.8672 cv
296.842 80.9922 li
298.248 80.9922 li
298.248 79.8984 li
296.842 79.8984 li
296.842 77.0234 li
295.404 77.8672 li
295.404 79.8984 li
294.373 79.8984 li
294.373 80.9922 li
295.404 80.9922 li
295.404 85.7734 li
295.404 86.6172 295.498 87.1792 295.592 87.4292 cv
295.717 87.7114 295.904 87.9292 296.186 88.0864 cv
296.467 88.2422 296.873 88.3364 297.373 88.3364 cv
297.686 88.3364 298.029 88.2734 298.436 88.1792 cv
298.248 86.9614 li
297.967 86.9922 297.779 87.0234 297.623 87.0234 cv
297.623 87.0234 li
cp
f
210.85 122.023 mo
211.318 121.492 211.818 121.242 212.443 121.242 cv
213.037 121.242 213.568 121.492 214.006 121.992 cv
214.443 122.492 214.662 123.305 214.662 124.398 cv
214.662 125.461 214.412 126.242 213.975 126.773 cv
213.537 127.305 213.006 127.586 212.381 127.586 cv
211.631 127.586 211.037 127.211 210.6 126.492 cv
210.318 126.055 210.193 125.336 210.193 124.336 cv
210.193 123.336 210.412 122.555 210.85 122.023 cv
210.85 122.023 li
cp
210.193 127.523 mo
210.756 128.336 211.537 128.742 212.506 128.742 cv
213.475 128.742 214.318 128.336 215.037 127.555 cv
215.725 126.805 216.1 125.68 216.1 124.273 cv
216.1 123.68 216.006 123.117 215.818 122.586 cv
215.662 122.086 215.443 121.617 215.131 121.242 cv
214.85 120.867 214.475 120.586 214.037 120.367 cv
213.568 120.18 213.068 120.086 212.568 120.086 cv
211.662 120.086 210.881 120.43 210.287 121.18 cv
210.287 117.086 li
208.881 117.086 li
208.881 128.555 li
210.193 128.555 li
210.193 127.523 li
cp
f
217.779 117.086 mo
219.185 117.086 li
219.185 128.556 li
217.779 128.556 li
217.779 117.086 li
cp
f
222.982 122.023 mo
223.42 121.492 224.014 121.242 224.701 121.242 cv
225.42 121.242 225.982 121.492 226.451 122.023 cv
226.92 122.555 227.17 123.336 227.17 124.367 cv
227.17 125.461 226.92 126.242 226.451 126.773 cv
225.982 127.305 225.42 127.586 224.701 127.586 cv
224.014 127.586 223.42 127.336 222.982 126.805 cv
222.514 126.273 222.264 125.461 222.264 124.398 cv
222.264 123.367 222.514 122.555 222.982 122.023 cv
222.982 122.023 li
cp
221.889 127.617 mo
222.607 128.367 223.545 128.742 224.701 128.742 cv
225.451 128.742 226.107 128.555 226.732 128.211 cv
227.326 127.867 227.795 127.43 228.107 126.805 cv
228.451 126.18 228.607 125.367 228.607 124.273 cv
228.607 122.961 228.232 121.961 227.514 121.18 cv
226.795 120.43 225.857 120.086 224.701 120.086 cv
223.701 120.086 222.826 120.367 222.107 120.992 cv
221.264 121.742 220.826 122.867 220.826 124.398 cv
220.826 125.805 221.17 126.867 221.889 127.617 cv
221.889 127.617 li
cp
f
234.975 127.055 mo
234.6 127.398 234.131 127.586 233.6 127.586 cv
232.912 127.586 232.35 127.336 231.912 126.836 cv
231.475 126.305 231.287 125.523 231.287 124.398 cv
231.287 123.305 231.506 122.492 231.943 121.992 cv
232.381 121.492 232.943 121.242 233.662 121.242 cv
234.131 121.242 234.537 121.367 234.881 121.648 cv
235.193 121.93 235.443 122.336 235.568 122.898 cv
236.912 122.711 li
236.756 121.867 236.381 121.211 235.818 120.773 cv
235.256 120.305 234.506 120.086 233.6 120.086 cv
232.912 120.086 232.225 120.242 231.631 120.586 cv
231.037 120.898 230.568 121.43 230.287 122.086 cv
229.975 122.773 229.818 123.555 229.818 124.43 cv
229.818 125.805 230.193 126.867 230.881 127.617 cv
231.568 128.367 232.475 128.742 233.6 128.742 cv
234.506 128.742 235.287 128.461 235.912 127.93 cv
236.506 127.398 236.912 126.648 237.037 125.711 cv
235.662 125.523 li
235.568 126.211 235.35 126.742 234.975 127.055 cv
234.975 127.055 li
cp
f
239.662 128.555 mo
239.662 125.273 li
240.631 124.305 li
243.412 128.555 li
245.131 128.555 li
241.631 123.336 li
244.818 120.242 li
242.975 120.242 li
239.662 123.617 li
239.662 117.086 li
238.256 117.086 li
238.256 128.555 li
239.662 128.555 li
cp
f
244.943 130.742 mo
254.255 130.742 li
254.255 131.742 li
244.943 131.742 li
244.943 130.742 li
cp
f
256.498 127.211 mo
256.654 126.961 256.873 126.711 257.123 126.43 cv
257.342 126.211 257.904 125.711 258.717 124.992 cv
259.748 124.148 260.467 123.492 260.904 122.992 cv
261.342 122.492 261.654 122.023 261.842 121.586 cv
262.029 121.148 262.123 120.711 262.123 120.242 cv
262.123 119.336 261.811 118.586 261.154 117.961 cv
260.529 117.367 259.654 117.055 258.561 117.055 cv
257.467 117.055 256.592 117.336 255.936 117.898 cv
255.279 118.461 254.936 119.305 254.842 120.367 cv
256.279 120.492 li
256.279 119.773 256.467 119.242 256.904 118.836 cv
257.279 118.43 257.842 118.211 258.529 118.211 cv
259.154 118.211 259.686 118.398 260.092 118.805 cv
260.498 119.18 260.686 119.648 260.686 120.211 cv
260.686 120.742 260.467 121.305 260.029 121.898 cv
259.592 122.492 258.717 123.305 257.498 124.336 cv
256.686 124.961 256.092 125.555 255.654 126.055 cv
255.217 126.555 254.936 127.055 254.717 127.586 cv
254.592 127.867 254.529 128.211 254.561 128.555 cv
262.154 128.555 li
262.154 127.211 li
256.498 127.211 li
cp
f
265.389 127.211 mo
265.545 126.961 265.764 126.711 266.014 126.43 cv
266.232 126.211 266.795 125.711 267.607 124.992 cv
268.639 124.148 269.357 123.492 269.795 122.992 cv
270.232 122.492 270.545 122.023 270.732 121.586 cv
270.92 121.148 271.014 120.711 271.014 120.242 cv
271.014 119.336 270.701 118.586 270.045 117.961 cv
269.42 117.367 268.545 117.055 267.451 117.055 cv
266.357 117.055 265.482 117.336 264.826 117.898 cv
264.17 118.461 263.826 119.305 263.732 120.367 cv
265.17 120.492 li
265.17 119.773 265.357 119.242 265.795 118.836 cv
266.17 118.43 266.732 118.211 267.42 118.211 cv
268.045 118.211 268.576 118.398 268.982 118.805 cv
269.389 119.18 269.576 119.648 269.576 120.211 cv
269.576 120.742 269.357 121.305 268.92 121.898 cv
268.482 122.492 267.607 123.305 266.389 124.336 cv
265.576 124.961 264.982 125.555 264.545 126.055 cv
264.107 126.555 263.826 127.055 263.607 127.586 cv
263.482 127.867 263.42 128.211 263.451 128.555 cv
271.045 128.555 li
271.045 127.211 li
265.389 127.211 li
cp
f
273.35 126.961 mo
274.944 126.961 li
274.944 128.556 li
273.35 128.556 li
273.35 126.961 li
cp
f
278.928 122.023 mo
279.365 121.492 279.865 121.242 280.521 121.242 cv
281.146 121.242 281.678 121.523 282.115 122.055 cv
282.553 122.586 282.771 123.398 282.771 124.523 cv
282.771 125.555 282.584 126.336 282.146 126.836 cv
281.709 127.336 281.178 127.586 280.553 127.586 cv
279.959 127.586 279.428 127.336 278.959 126.805 cv
278.521 126.273 278.303 125.461 278.303 124.398 cv
278.303 123.336 278.521 122.523 278.928 122.023 cv
278.928 122.023 li
cp
284.053 128.555 mo
284.053 117.086 li
282.646 117.086 li
282.646 121.242 li
282.428 120.867 282.084 120.617 281.709 120.398 cv
281.303 120.18 280.865 120.086 280.365 120.086 cv
279.678 120.086 279.084 120.242 278.521 120.617 cv
277.959 120.961 277.553 121.492 277.271 122.148 cv
277.021 122.836 276.865 123.586 276.865 124.398 cv
276.865 125.273 277.021 126.023 277.334 126.68 cv
277.615 127.305 278.053 127.805 278.615 128.18 cv
279.178 128.555 279.771 128.742 280.428 128.742 cv
281.459 128.742 282.209 128.305 282.74 127.492 cv
282.74 128.555 li
284.053 128.555 li
cp
f
291.6 124.898 mo
291.6 125.523 291.506 125.992 291.35 126.305 cv
291.162 126.711 290.85 127.023 290.412 127.273 cv
290.006 127.523 289.537 127.617 288.975 127.617 cv
288.412 127.617 288.006 127.492 287.725 127.273 cv
287.443 126.992 287.318 126.711 287.318 126.305 cv
287.318 126.086 287.381 125.836 287.506 125.648 cv
287.631 125.461 287.818 125.305 288.068 125.18 cv
288.287 125.086 288.725 124.992 289.287 124.93 cv
290.318 124.773 291.068 124.617 291.6 124.398 cv
291.6 124.898 li
cp
291.975 128.555 mo
293.443 128.555 li
293.287 128.242 293.162 127.898 293.1 127.555 cv
293.037 127.211 293.006 126.367 293.006 125.086 cv
293.006 123.211 li
293.006 122.586 293.006 122.148 292.943 121.93 cv
292.85 121.523 292.725 121.211 292.506 120.961 cv
292.287 120.711 291.975 120.492 291.537 120.336 cv
291.068 120.148 290.506 120.086 289.787 120.086 cv
289.068 120.086 288.443 120.18 287.912 120.367 cv
287.381 120.586 286.943 120.836 286.662 121.211 cv
286.381 121.555 286.162 122.055 286.037 122.648 cv
287.412 122.836 li
287.568 122.242 287.787 121.805 288.131 121.586 cv
288.443 121.367 288.912 121.242 289.6 121.242 cv
290.287 121.242 290.85 121.398 291.193 121.711 cv
291.475 121.961 291.6 122.336 291.6 122.93 cv
291.6 122.961 291.6 123.086 291.6 123.305 cv
291.037 123.492 290.225 123.648 289.068 123.773 cv
288.506 123.836 288.1 123.93 287.818 123.992 cv
287.443 124.086 287.1 124.242 286.818 124.43 cv
286.506 124.648 286.256 124.93 286.068 125.273 cv
285.912 125.586 285.787 125.961 285.787 126.367 cv
285.787 127.055 286.037 127.617 286.537 128.055 cv
287.037 128.492 287.725 128.742 288.662 128.742 cv
289.193 128.742 289.725 128.648 290.193 128.461 cv
290.693 128.273 291.162 127.961 291.693 127.523 cv
291.756 127.93 291.818 128.242 291.975 128.555 cv
291.975 128.555 li
cp
f
297.623 127.367 mo
297.404 127.367 297.248 127.336 297.154 127.273 cv
297.029 127.18 296.967 127.086 296.904 126.961 cv
296.873 126.867 296.842 126.617 296.842 126.211 cv
296.842 121.336 li
298.248 121.336 li
298.248 120.242 li
296.842 120.242 li
296.842 117.367 li
295.404 118.211 li
295.404 120.242 li
294.373 120.242 li
294.373 121.336 li
295.404 121.336 li
295.404 126.117 li
295.404 126.961 295.498 127.523 295.592 127.773 cv
295.717 128.055 295.904 128.273 296.186 128.43 cv
296.467 128.586 296.873 128.68 297.373 128.68 cv
297.686 128.68 298.029 128.617 298.436 128.523 cv
298.248 127.305 li
297.967 127.336 297.779 127.367 297.623 127.367 cv
297.623 127.367 li
cp
f
gsave
179.209 0.453125 mo
201.209 0.453125 li
201.209 13.6563 li
179.209 13.6563 li
179.209 0.453125 li
cp
clp
200.248 -12.8198 mo
200.248 12.0552 li
179.318 12.0552 li
179.318 -17.9922 li
196.045 -17.9922 li
196.045 -17.9922 197.1 -17.875 198.615 -16.25 cv
200.248 -14.5161 200.248 -12.8198 200.248 -12.8198 cv
0.0509804 0.0784314 0 0 cmyk
f
grestore
gsave
173.209 0.453125 mo
205.209 0.453125 li
205.209 17.6563 li
173.209 17.6563 li
173.209 0.453125 li
cp
clp
0.8 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
200.248 -12.8198 mo
200.248 12.0552 li
179.318 12.0552 li
179.318 -17.9922 li
196.045 -17.9922 li
196.045 -17.9922 197.1 -17.875 198.615 -16.25 cv
200.248 -14.5161 200.248 -12.8198 200.248 -12.8198 cv
200.248 -12.8198 li
cp
@
grestore
183.17 2.4375 mo
196.045 2.4375 li
196.045 4.07031 li
183.17 4.07031 li
183.17 2.4375 li
cp
0.419608 0.596078 0 0 cmyk
f
183.17 6.1792 mo
196.045 6.1792 li
196.045 7.81201 li
183.17 7.81201 li
183.17 6.1792 li
cp
f
200.248 29.0542 mo
200.248 53.9375 li
179.326 53.9375 li
179.326 23.8833 li
196.045 23.8833 li
196.045 23.8833 197.1 24.0083 198.623 25.625 cv
200.248 27.3594 200.248 29.0542 200.248 29.0542 cv
0.0509804 0.0784314 0 0 cmyk
f
0.8 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
196.045 23.8828 mo
196.045 27.6172 li
196.045 27.6172 198.256 27.5698 199.186 27.6172 cv
199.92 27.6563 200.131 28.312 200.131 28.312 cv
200.248 29.0552 mo
200.248 29.0552 mo
200.248 53.938 li
179.326 53.938 li
179.326 23.8828 li
196.045 23.8828 li
196.045 23.8828 197.1 24.0078 198.623 25.625 cv
200.248 27.3589 200.248 29.0552 200.248 29.0552 cv
200.248 29.0552 li
cp
0.745098 0.709804 0.662745 0.796078 cmyk
@
183.178 29.3281 mo
196.045 29.3281 li
196.045 30.9614 li
183.178 30.9614 li
183.178 29.3281 li
cp
0.419608 0.596078 0 0 cmyk
f
183.178 33.0703 mo
196.045 33.0703 li
196.045 34.7031 li
183.178 34.7031 li
183.178 33.0703 li
cp
f
183.178 36.8203 mo
196.045 36.8203 li
196.045 38.4531 li
183.178 38.4531 li
183.178 36.8203 li
cp
f
183.178 40.5703 mo
196.045 40.5703 li
196.045 42.2031 li
183.178 42.2031 li
183.178 40.5703 li
cp
f
183.178 44.3125 mo
196.045 44.3125 li
196.045 45.9453 li
183.178 45.9453 li
183.178 44.3125 li
cp
f
183.178 48.0625 mo
196.045 48.0625 li
196.045 49.6953 li
183.178 49.6953 li
183.178 48.0625 li
cp
f
200.248 70.9375 mo
200.248 95.8125 li
179.326 95.8125 li
179.326 65.7651 li
196.045 65.7651 li
196.045 65.7651 197.1 65.8833 198.623 67.5083 cv
200.248 69.2422 200.248 70.9375 200.248 70.9375 cv
0.0509804 0.0784314 0 0 cmyk
f
196.045 65.7661 mo
196.045 69.4922 li
196.045 69.4922 198.256 69.4448 199.186 69.4922 cv
199.92 69.5313 200.131 70.1948 200.131 70.1948 cv
200.248 70.938 mo
200.248 70.938 mo
200.248 95.812 li
179.326 95.812 li
179.326 65.7661 li
196.045 65.7661 li
196.045 65.7661 197.1 65.8828 198.623 67.5078 cv
200.248 69.2422 200.248 70.938 200.248 70.938 cv
200.248 70.938 li
cp
0.745098 0.709804 0.662745 0.796078 cmyk
@
183.178 71.2031 mo
196.045 71.2031 li
196.045 72.8364 li
183.178 72.8364 li
183.178 71.2031 li
cp
0.419608 0.596078 0 0 cmyk
f
183.178 74.9531 mo
196.045 74.9531 li
196.045 76.5864 li
183.178 76.5864 li
183.178 74.9531 li
cp
f
183.178 78.6953 mo
196.045 78.6953 li
196.045 80.3281 li
183.178 80.3281 li
183.178 78.6953 li
cp
f
183.178 82.4453 mo
196.045 82.4453 li
196.045 84.0781 li
183.178 84.0781 li
183.178 82.4453 li
cp
f
183.178 86.1953 mo
196.045 86.1953 li
196.045 87.8281 li
183.178 87.8281 li
183.178 86.1953 li
cp
f
183.178 89.937 mo
196.045 89.937 li
196.045 91.5703 li
183.178 91.5703 li
183.178 89.937 li
cp
f
210.85 165.438 mo
211.318 164.906 211.818 164.656 212.443 164.656 cv
213.037 164.656 213.568 164.906 214.006 165.406 cv
214.443 165.906 214.662 166.718 214.662 167.813 cv
214.662 168.875 214.412 169.656 213.975 170.188 cv
213.537 170.718 213.006 171 212.381 171 cv
211.631 171 211.037 170.625 210.6 169.906 cv
210.318 169.468 210.193 168.75 210.193 167.75 cv
210.193 166.75 210.412 165.968 210.85 165.438 cv
210.85 165.438 li
cp
210.193 170.938 mo
210.756 171.75 211.537 172.156 212.506 172.156 cv
213.475 172.156 214.318 171.75 215.037 170.968 cv
215.725 170.218 216.1 169.094 216.1 167.688 cv
216.1 167.094 216.006 166.531 215.818 166 cv
215.662 165.5 215.443 165.031 215.131 164.656 cv
214.85 164.281 214.475 164 214.037 163.781 cv
213.568 163.594 213.068 163.5 212.568 163.5 cv
211.662 163.5 210.881 163.844 210.287 164.594 cv
210.287 160.5 li
208.881 160.5 li
208.881 171.968 li
210.193 171.968 li
210.193 170.938 li
cp
0.745098 0.709804 0.662745 0.796078 cmyk
f
217.779 160.5 mo
219.185 160.5 li
219.185 171.969 li
217.779 171.969 li
217.779 160.5 li
cp
f
222.982 165.438 mo
223.42 164.906 224.014 164.656 224.701 164.656 cv
225.42 164.656 225.982 164.906 226.451 165.438 cv
226.92 165.968 227.17 166.75 227.17 167.781 cv
227.17 168.875 226.92 169.656 226.451 170.188 cv
225.982 170.718 225.42 171 224.701 171 cv
224.014 171 223.42 170.75 222.982 170.218 cv
222.514 169.688 222.264 168.875 222.264 167.813 cv
222.264 166.781 222.514 165.968 222.982 165.438 cv
222.982 165.438 li
cp
221.889 171.031 mo
222.607 171.781 223.545 172.156 224.701 172.156 cv
225.451 172.156 226.107 171.968 226.732 171.625 cv
227.326 171.281 227.795 170.844 228.107 170.218 cv
228.451 169.594 228.607 168.781 228.607 167.688 cv
228.607 166.375 228.232 165.375 227.514 164.594 cv
226.795 163.844 225.857 163.5 224.701 163.5 cv
223.701 163.5 222.826 163.781 222.107 164.406 cv
221.264 165.156 220.826 166.281 220.826 167.813 cv
220.826 169.218 221.17 170.281 221.889 171.031 cv
221.889 171.031 li
cp
f
234.975 170.468 mo
234.6 170.813 234.131 171 233.6 171 cv
232.912 171 232.35 170.75 231.912 170.25 cv
231.475 169.718 231.287 168.938 231.287 167.813 cv
231.287 166.718 231.506 165.906 231.943 165.406 cv
232.381 164.906 232.943 164.656 233.662 164.656 cv
234.131 164.656 234.537 164.781 234.881 165.063 cv
235.193 165.344 235.443 165.75 235.568 166.313 cv
236.912 166.125 li
236.756 165.281 236.381 164.625 235.818 164.188 cv
235.256 163.718 234.506 163.5 233.6 163.5 cv
232.912 163.5 232.225 163.656 231.631 164 cv
231.037 164.313 230.568 164.844 230.287 165.5 cv
229.975 166.188 229.818 166.968 229.818 167.844 cv
229.818 169.218 230.193 170.281 230.881 171.031 cv
231.568 171.781 232.475 172.156 233.6 172.156 cv
234.506 172.156 235.287 171.875 235.912 171.344 cv
236.506 170.813 236.912 170.063 237.037 169.125 cv
235.662 168.938 li
235.568 169.625 235.35 170.156 234.975 170.468 cv
234.975 170.468 li
cp
f
239.662 171.968 mo
239.662 168.688 li
240.631 167.718 li
243.412 171.968 li
245.131 171.968 li
241.631 166.75 li
244.818 163.656 li
242.975 163.656 li
239.662 167.031 li
239.662 160.5 li
238.256 160.5 li
238.256 171.968 li
239.662 171.968 li
cp
f
244.943 174.156 mo
254.255 174.156 li
254.255 175.156 li
244.943 175.156 li
244.943 174.156 li
cp
f
256.498 170.625 mo
256.654 170.375 256.873 170.125 257.123 169.844 cv
257.342 169.625 257.904 169.125 258.717 168.406 cv
259.748 167.563 260.467 166.906 260.904 166.406 cv
261.342 165.906 261.654 165.438 261.842 165 cv
262.029 164.563 262.123 164.125 262.123 163.656 cv
262.123 162.75 261.811 162 261.154 161.375 cv
260.529 160.781 259.654 160.468 258.561 160.468 cv
257.467 160.468 256.592 160.75 255.936 161.313 cv
255.279 161.875 254.936 162.718 254.842 163.781 cv
256.279 163.906 li
256.279 163.188 256.467 162.656 256.904 162.25 cv
257.279 161.844 257.842 161.625 258.529 161.625 cv
259.154 161.625 259.686 161.813 260.092 162.218 cv
260.498 162.594 260.686 163.063 260.686 163.625 cv
260.686 164.156 260.467 164.718 260.029 165.313 cv
259.592 165.906 258.717 166.718 257.498 167.75 cv
256.686 168.375 256.092 168.968 255.654 169.468 cv
255.217 169.968 254.936 170.468 254.717 171 cv
254.592 171.281 254.529 171.625 254.561 171.968 cv
262.154 171.968 li
262.154 170.625 li
256.498 170.625 li
cp
f
264.795 171.25 mo
265.451 171.844 266.295 172.156 267.295 172.156 cv
268.42 172.156 269.326 171.813 270.076 171.125 cv
270.795 170.406 271.17 169.563 271.17 168.563 cv
271.17 167.813 270.951 167.218 270.607 166.718 cv
270.232 166.218 269.701 165.906 269.014 165.75 cv
269.545 165.5 269.92 165.188 270.201 164.781 cv
270.482 164.375 270.607 163.906 270.607 163.438 cv
270.607 162.906 270.451 162.406 270.17 161.968 cv
269.889 161.5 269.482 161.125 268.951 160.875 cv
268.451 160.594 267.889 160.468 267.232 160.468 cv
266.357 160.468 265.576 160.718 264.951 161.25 cv
264.357 161.75 263.982 162.5 263.795 163.438 cv
265.201 163.688 li
265.326 163 265.545 162.468 265.92 162.125 cv
266.264 161.781 266.732 161.625 267.295 161.625 cv
267.826 161.625 268.264 161.781 268.639 162.125 cv
268.982 162.468 269.17 162.875 269.17 163.406 cv
269.17 164.063 268.92 164.531 268.451 164.844 cv
267.951 165.156 267.42 165.313 266.826 165.313 cv
266.764 165.313 266.67 165.313 266.576 165.281 cv
266.451 166.531 li
266.826 166.406 267.17 166.375 267.42 166.375 cv
268.076 166.375 268.607 166.563 269.045 167 cv
269.451 167.438 269.67 167.938 269.67 168.594 cv
269.67 169.281 269.451 169.844 268.982 170.313 cv
268.545 170.781 267.982 171 267.295 171 cv
266.732 171 266.264 170.813 265.889 170.468 cv
265.482 170.125 265.232 169.531 265.076 168.75 cv
263.67 168.938 li
263.764 169.875 264.139 170.656 264.795 171.25 cv
264.795 171.25 li
cp
f
273.35 170.375 mo
274.944 170.375 li
274.944 171.969 li
273.35 171.969 li
273.35 170.375 li
cp
f
278.928 165.438 mo
279.365 164.906 279.865 164.656 280.521 164.656 cv
281.146 164.656 281.678 164.938 282.115 165.468 cv
282.553 166 282.771 166.813 282.771 167.938 cv
282.771 168.968 282.584 169.75 282.146 170.25 cv
281.709 170.75 281.178 171 280.553 171 cv
279.959 171 279.428 170.75 278.959 170.218 cv
278.521 169.688 278.303 168.875 278.303 167.813 cv
278.303 166.75 278.521 165.938 278.928 165.438 cv
278.928 165.438 li
cp
284.053 171.968 mo
284.053 160.5 li
282.646 160.5 li
282.646 164.656 li
282.428 164.281 282.084 164.031 281.709 163.813 cv
281.303 163.594 280.865 163.5 280.365 163.5 cv
279.678 163.5 279.084 163.656 278.521 164.031 cv
277.959 164.375 277.553 164.906 277.271 165.563 cv
277.021 166.25 276.865 167 276.865 167.813 cv
276.865 168.688 277.021 169.438 277.334 170.094 cv
277.615 170.718 278.053 171.218 278.615 171.594 cv
279.178 171.968 279.771 172.156 280.428 172.156 cv
281.459 172.156 282.209 171.718 282.74 170.906 cv
282.74 171.968 li
284.053 171.968 li
cp
f
291.6 168.313 mo
291.6 168.938 291.506 169.406 291.35 169.718 cv
291.162 170.125 290.85 170.438 290.412 170.688 cv
290.006 170.938 289.537 171.031 288.975 171.031 cv
288.412 171.031 288.006 170.906 287.725 170.688 cv
287.443 170.406 287.318 170.125 287.318 169.718 cv
287.318 169.5 287.381 169.25 287.506 169.063 cv
287.631 168.875 287.818 168.718 288.068 168.594 cv
288.287 168.5 288.725 168.406 289.287 168.344 cv
290.318 168.188 291.068 168.031 291.6 167.813 cv
291.6 168.313 li
cp
291.975 171.968 mo
293.443 171.968 li
293.287 171.656 293.162 171.313 293.1 170.968 cv
293.037 170.625 293.006 169.781 293.006 168.5 cv
293.006 166.625 li
293.006 166 293.006 165.563 292.943 165.344 cv
292.85 164.938 292.725 164.625 292.506 164.375 cv
292.287 164.125 291.975 163.906 291.537 163.75 cv
291.068 163.563 290.506 163.5 289.787 163.5 cv
289.068 163.5 288.443 163.594 287.912 163.781 cv
287.381 164 286.943 164.25 286.662 164.625 cv
286.381 164.968 286.162 165.468 286.037 166.063 cv
287.412 166.25 li
287.568 165.656 287.787 165.218 288.131 165 cv
288.443 164.781 288.912 164.656 289.6 164.656 cv
290.287 164.656 290.85 164.813 291.193 165.125 cv
291.475 165.375 291.6 165.75 291.6 166.344 cv
291.6 166.375 291.6 166.5 291.6 166.718 cv
291.037 166.906 290.225 167.063 289.068 167.188 cv
288.506 167.25 288.1 167.344 287.818 167.406 cv
287.443 167.5 287.1 167.656 286.818 167.844 cv
286.506 168.063 286.256 168.344 286.068 168.688 cv
285.912 169 285.787 169.375 285.787 169.781 cv
285.787 170.468 286.037 171.031 286.537 171.468 cv
287.037 171.906 287.725 172.156 288.662 172.156 cv
289.193 172.156 289.725 172.063 290.193 171.875 cv
290.693 171.688 291.162 171.375 291.693 170.938 cv
291.756 171.344 291.818 171.656 291.975 171.968 cv
291.975 171.968 li
cp
f
297.623 170.781 mo
297.404 170.781 297.248 170.75 297.154 170.688 cv
297.029 170.594 296.967 170.5 296.904 170.375 cv
296.873 170.281 296.842 170.031 296.842 169.625 cv
296.842 164.75 li
298.248 164.75 li
298.248 163.656 li
296.842 163.656 li
296.842 160.781 li
295.404 161.625 li
295.404 163.656 li
294.373 163.656 li
294.373 164.75 li
295.404 164.75 li
295.404 169.531 li
295.404 170.375 295.498 170.938 295.592 171.188 cv
295.717 171.468 295.904 171.688 296.186 171.844 cv
296.467 172 296.873 172.094 297.373 172.094 cv
297.686 172.094 298.029 172.031 298.436 171.938 cv
298.248 170.718 li
297.967 170.75 297.779 170.781 297.623 170.781 cv
297.623 170.781 li
cp
f
200.248 154.695 mo
200.248 179.57 li
179.326 179.57 li
179.326 149.523 li
196.045 149.523 li
196.045 149.523 197.1 149.641 198.623 151.266 cv
200.248 153 200.248 154.695 200.248 154.695 cv
0.0509804 0.0784314 0 0 cmyk
f
196.045 149.523 mo
196.045 153.25 li
196.045 153.25 198.256 153.203 199.186 153.25 cv
199.92 153.289 200.131 153.953 200.131 153.953 cv
200.248 154.695 mo
200.248 154.695 mo
200.248 179.57 li
179.326 179.57 li
179.326 149.523 li
196.045 149.523 li
196.045 149.523 197.1 149.641 198.623 151.266 cv
200.248 153 200.248 154.695 200.248 154.695 cv
200.248 154.695 li
cp
0.745098 0.709804 0.662745 0.796078 cmyk
@
183.178 154.961 mo
196.045 154.961 li
196.045 156.594 li
183.178 156.594 li
183.178 154.961 li
cp
0.419608 0.596078 0 0 cmyk
f
183.178 158.711 mo
196.045 158.711 li
196.045 160.344 li
183.178 160.344 li
183.178 158.711 li
cp
f
183.178 162.453 mo
196.045 162.453 li
196.045 164.086 li
183.178 164.086 li
183.178 162.453 li
cp
f
183.178 166.203 mo
196.045 166.203 li
196.045 167.836 li
183.178 167.836 li
183.178 166.203 li
cp
f
183.178 169.953 mo
196.045 169.953 li
196.045 171.586 li
183.178 171.586 li
183.178 169.953 li
cp
f
183.178 173.695 mo
196.045 173.695 li
196.045 175.328 li
183.178 175.328 li
183.178 173.695 li
cp
f
200.248 112.813 mo
200.248 137.695 li
179.326 137.695 li
179.326 107.64 li
196.045 107.64 li
196.045 107.64 197.1 107.765 198.623 109.383 cv
200.248 111.117 200.248 112.813 200.248 112.813 cv
0.0509804 0.0784314 0 0 cmyk
f
196.045 107.641 mo
196.045 111.375 li
196.045 111.375 198.256 111.328 199.186 111.375 cv
199.92 111.414 200.131 112.07 200.131 112.07 cv
200.248 112.812 mo
200.248 112.812 mo
200.248 137.695 li
179.326 137.695 li
179.326 107.641 li
196.045 107.641 li
196.045 107.641 197.1 107.766 198.623 109.383 cv
200.248 111.117 200.248 112.812 200.248 112.812 cv
200.248 112.812 li
cp
0.745098 0.709804 0.662745 0.796078 cmyk
@
183.178 113.086 mo
196.045 113.086 li
196.045 114.719 li
183.178 114.719 li
183.178 113.086 li
cp
0.419608 0.596078 0 0 cmyk
f
183.178 116.828 mo
196.045 116.828 li
196.045 118.461 li
183.178 118.461 li
183.178 116.828 li
cp
f
183.178 120.578 mo
196.045 120.578 li
196.045 122.211 li
183.178 122.211 li
183.178 120.578 li
cp
f
183.178 124.328 mo
196.045 124.328 li
196.045 125.961 li
183.178 125.961 li
183.178 124.328 li
cp
f
183.178 128.07 mo
196.045 128.07 li
196.045 129.703 li
183.178 129.703 li
183.178 128.07 li
cp
f
183.178 131.82 mo
196.045 131.82 li
196.045 133.453 li
183.178 133.453 li
183.178 131.82 li
cp
f
gsave
169.209 0 mo
312.412 0 li
312.412 193.656 li
169.209 193.656 li
169.209 0 li
cp
clp
1 lw
10 ml
170.646 0.5 mo
311.896 0.5 li
311.896 192.016 li
170.646 192.016 li
170.646 0.5 li
cp
0.745098 0.709804 0.662745 0.796078 cmyk
@
grestore
0.6 lw
10 ml
169.232 164.68 mo
141.232 164.68 114.732 122.961 99.897 122.961 cv
0.745098 0.709804 0.662745 0.796078 cmyk
@
168.139 160.961 mo
174.615 164.703 li
168.139 168.445 li
168.139 160.961 li
cp
f
169.232 81.2422 mo
140.232 83.3521 113.232 104.68 99.897 122.961 cv
@
167.873 77.6172 mo
174.6 80.875 li
168.412 85.0781 li
167.873 77.6172 li
cp
f
169.232 117.352 mo
149.232 117.352 117.232 117.016 99.897 122.961 cv
@
168.139 113.633 mo
174.615 117.367 li
168.139 121.109 li
168.139 113.633 li
cp
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: Humanist521BT-BoldCondensed Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Humanist521BT-BoldCondensed def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 66 /B putdup 77 /M putdup 86 /V putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 117 /u putdup 118 /v putdef/FontBBox {-185 -236 1014 962} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings20 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/space <1C60D8A8C9B86A968D> |-/period <1C60D8A8C9B879BE1E15F0928490B4575DEAC5F0BE046314257991805800B657E562A3F331735C553F247A2239B3A82F69B7570FFB338D9EF3693E195285695C9CF285EBC3> |-/B <1C60D8A8C9B78181C0AF7574AFEFDE31A5AA0C337404FA65738719623869EC1DAE054B133BB02AD9E63640A09690BD49323EC152BCFF1F29DDB9F55D24485E11A8772DC350C141239F83DB7FA3F4F78A8569C81E8B314C584393BE0A91DFA1D1AA04563C592681F505ECB7B7B0FE37DA08C5E48D41A1D0502AB9444A7410C8ECAB21FAD45DBE5F4CCA4B84DA811FEA64DED01477E091> |-/M <1C60D8A8C9B62E09D045562CA8540433816A5F582ED5D66E66384C5CEE86CA7ED300DB48D7486C1022562894DAA4E49F1A77DAC10E15EA61> |-/V <1C60D8A8C9B7402F14A5810E773E09DEC91073C288028277F2EA310A71E147259AA9A33163DC9CAAE9E1860366919EFA330700E48D1025560A6E5983AAAAA31F9907> |-/a <1C60D8A8C9B779148889A84E89B7C8E7D4D6A0AAF55DAE6FC1446C8647E5D636256C8F0387D90EB70808303EEC4494E421F619A65D29BFEC7585F099444EA7FF2C0B514098B20CF8EF38E57B2E64CBF712ED0D15FA031EC0B5933C2F79D2774EFAB054EF3945C5E9313814756F382FAA1956F05D225F2899093BB0F255ED0C7C6948440E59A9E7CEA9ABA70613E621016DAD11D3C4AE66DE9C526970AD7EF7EFF4AC58489432C430EFA8B6C959A238D5E3930772393FD190773F24F462274DB3E0FAF3148A86FC13E27AA65D7DBC474B55ECDBB2FEEAA2B216A2ED8DD4547DC75D30> |-/c <1C60D8A8C9B70B6BB5A4CFFDBDC9F1BE54F4E3EE2A47C32BF87AB40DD9F2FDE421F50A29E2E11A0534E113EA94664A8873446C17CC124002A3304F53D2925B29F28352F66A910067E089AB05DAB9B45E121CA16B016871152533ACF774BD798B6981E0984ADBF4326DFC51E32ED44C7E804549FD076B80A3118DC05BDFCF6C174E14> |-/d <1C60D8A8C9B7A66FF2B921E1473FBA581E7CCA4DB027DAA14465688580F5A5E05802E4BD0BD4140EDA2E3B603DA15FA1FA14E54AA1D12424A038100183B503B9A55971BB66125B4382B237DD98C019A41156FB1A3921FAF0E818F88C53F598505733B5CF700B52CD12DA10B0012B0DA08F2EABCECE39F4BEAFA6511710BDD78FC64677FE9FCB3EB64F29AA4AE6B2DD824A> |-/e <1C60D8A8C9B7635685105750B982F9BC390CAEB6C326CAE83E311C6801C091D71E4AB82FDB7D19A86E6A0570D0339025F1E2805F47552FACD5B4DF754819003AF7154BECA192471505CD07FCE5DB3D73252D4BBC6BEC3E11A02F5AF7E54B2DD6821AB0E72397B765289B2C5A2E3B935233132E0B982B983DC2D5D5A3BDB2AFAFA1EC6D105A976359BE33B79B920D2F0CA846C4FF57C0E3F60E186B8D302A86> |-/h <1C60D8A8C9B7A8F22C921594AFBCD6233F9E8DDCDA6A7AF4839FD968E7134FACC3A47347699BA1665A4D4536AE8AF28669FED8A17A154C40D717699B645D1FCB974F35C3B11135184A6760BD3007DC7B47CFF9FF04F2BCC43184> |-/i <1C60D8A8C9B87F87DF97D32C7F5B59CE576BC341075C2F8C4598E7B14292DC5BA62170CC3FF1CB58F75C4556715CB77554E6538F22B894BF1F12AD1AA9362663AA8C949D08C570504E552D98543858339A81E8F0BB> |-/k <1C60D8A8C9B74A3EF33C4CC7DE1734F2E51C0BF82E30767D57CD47FF1730F8C4B0125D31175C85800C7269EB5CBCF91DB7A22C> |-/l <1C60D8A8C9B87A8F726124394B268AC7A51709141BBB> |-/n <1C60D8A8C9B7A9C0D3D62020D6D08025027ADC3EC22FD4A3A95D1F1087BAC5BB25B90CF54FF623B8736DBE4E6C76C74D9516F0EAE24CEB07986EC381B1B59F65CBC3EF3F6A3FBF9F8A6995916C36FB785BCDABBCDC45C402E3D9> |-/o <1C60D8A8C9B7587019EAEC8BA45EA4E2ED2A554653C8B708A048C615850025747302E2DA4F1F18F7A7733B9DFA1CC682CC1A51CC79CF9E84B335CAA7CCA859C309738ADDF424CE393ABE7E15C91DE65C4F693C295E864398D58F8FE080E134B73B272DD6E417BDBBDF54D05D800D1F67406730CBD1584980D134E5032D80B3530AA2> |-/r <1C60D8A8C9B722FF7362A249A6EEC353E591E4B77317ABDCA37C402D91FFE0DD94FAFBCA6E27FD0DEEA15DB5AC9238301B05CA72ECF7E11110FA4B87EDC4A2F1D4AED534BD6C1622892E99CE3A67CB92C163B5BC> |-/s <1C60D8A8C9B7361F02B327E702198C6FDA07A90631AF99025BFF3ACAEE7B88786B1C6A95B8FE05B6AC9D7D3E46EF4AA66A6070B70804864B92E3C29CDF3B034704A94435A84E7C3FEF8845A4C721CA0782AAFD335DBFD0D632D8C21FCB9ABE46849FEA1756E9A42A2DA4A6658496458CAFDE6FF771B16F251853A8AB82457C8144DC4543BAC61BBBB139E333A6455F20C5CD9007278C19E075F7F4EA5E6112F9C93C2D5D1EF13754EA0B647D9E7F2C00DA414A37CB24F31F0FAD03> |-/u <1C60D8A8C9B7A9C0D355275ACD34CBD753DD029AEA635CF980A04715531274F0B91FFFC41F02AFB000AFBE0BE84D08C4442C5A228CD000DB53E531DF5973D1333A80C7E5AB79B7314D20BFEC35DC7B3DC84E5C0B6A9F69BEFFD4> |-/v <1C60D8A8C9B71DE7D2964163E3452F1A950E90709C599510BB195F98F232C1AE9EA71F0AC80CD0A039A2CE257FC16442D12D38EAE652BCBB8DD6C2457811A45310F6> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FFKHGJ+Humanist521BT-BoldCondensed-Identity-H /Humanist521BT-BoldCondensed findfont ct_VMDictPut/FFKHGJ+Humanist521BT-BoldCondensed-Identity-H*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 19{/.notdef}rp /B 10{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /s /.notdef /u /v 137{/.notdef}rp]FFKHGJ+Humanist521BT-BoldCondensed-Identity-H nfFFKHGJ+Humanist521BT-BoldCondensed-Identity-H*1 [18.1291 0 0 -18.1291 0 0 ]msf0.290039 107.46 mo(Mache neue)[12.6763 8.16162 7.24951 9.04688 7.97607 4.63818 9.0293 7.97559 9.0293 0 ]xsh0.290039 126.597 mo(Versionen von)[7.62158 7.97559 6.83398 7.05518 4.29297 8.75488 9.0293 7.97559 9.0293 4.63818 7.50684 8.75439 0 ]xsh0.290039 145.732 mo(diesen Blocks.)[9.08203 4.29346 7.97559 7.05518 7.97559 9.0293 4.63867 9.75488 4.35498 8.75488 7.25 8.42676 7.05518 0 ]xsh0.768627 0.752941 0.623529 0.811765 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 83 /S putdup 97 /a putdup 101 /e putdup 104 /h putdup 114 /r putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FFKHGK+ArialMT /ArialMT findfont ct_VMDictPut/FFKHGK+ArialMT*1 [83{/.notdef}rp /S 13{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h 9{/.notdef}rp /r 141{/.notdef}rp]FFKHGK+ArialMT nfFFKHGK+ArialMT*1 [12.996 0 0 -12.996 0 0 ]msf226.709 208.854 mo(Share)[8.66797 7.22754 7.22852 4.32715 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/FFKHGJ+Humanist521BT-BoldCondensed-Identity-H*1 uf/FFKHGJ+Humanist521BT-BoldCondensed-Identity-H uf/Humanist521BT-BoldCondensed uf/FFKHGK+ArialMT*1 uf/FFKHGK+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Volker Herminghaus) ()%%Title: (u06-04.eps)%%CreationDate: 12/1/19 10:31 PM%AI9_DataStream%Gb!Q;f7#d*No7VOmf57+2]7Rr)/O,@D2`=*BS)(Yi(FmX2#@].[<M4OX/aH>GLM4$B4fKcIJs=S>uIXIQ)'SC9W$$[^Db?tPK`m,%R%=S.otEsr*s`)C6*FX.16lG\E[u"e%S$iTc5lS3,1,!2p3HT>o1!U\gb6e"mYP*XamD!u?EC,C9V;9q^X>@=-h*q8muWIHqG2NO%d3$X;Y8#Qg*AgJhZi8sX"V2ULdXKkVc*k6WO3"\5RIt$R?*?`YC.jQi0/iQoc!j/&:@000%e^79"^+r+bPk6YFaMMSKWg`qcPE:r%rGk/$0n$hV76gZrGV&56$j+G$51;`_=2W"+6pAG#aAI3hO14==\;*:-ak[G?#A=^";"gS]'iHBUpUVTc8As]3+2#u,r#8,_K6fk&%m6:3P>8!$mk2bgV7`0#(bKZcr,OomN]chSrmuI\#?iDk1'#oZ1q9T3fU^opk]5WuP&3j7W+#EK6(ei:q[b@jm;gPN@ZQW&=1pq,E%rdeL5#Tp_IUOR.I(F7O;bn/.i:JptrL\6I.i:/Sk()D<d!&+=9_>g>N[//:*g]=%L(]3$)]o)&!?KMhn6*:/G8SsmPU:pDX>d`-9%(g@g8%E!.:&H_t.oRu*@e45<#N#%%bq>=QIeB`Xi0LuBqe-kPom5teUo)t7WVe2.G.`S+smM2_SLnDJe:EQ;1@-l\]_1,>U58m65%nSUk"(pnjhZ4D=I?Ea7b#pAA3^l1oC!PgCd$jiSX2\t]crJ^W4T>9diNNT>R7m4Waoo@fo?OKaR%=':"rsr"'p`c=%BLYnhAEs7.%=A:n\@*%#1dJ)`!_u5Vf4RRa%8PbmoVXq1*2u7W[546YtHp@^NN#1P^Sj)%dI_Uq*+0qH$pe@<7UgGDOYEI\A1V3H$h.A!I1ZR2j%E;)E>RVoa7gTC]sf3I&fNQRi1\u2%cq5-4!SngFQ:F7@K)$,=7knsQ94kguK/^PoSj:LjOB<Y_oaIQtmV[s"i;pPT'h.ecK!0nt"%!;$IUndO->^O\tR43rrPO%:Oa*Z>7nS9q[#NQA@PSbLXCMuIn"j*o]5p=n\F[HAL6s8G`q4NkG1BAGj8p>7_b)O&OuCdk)EbPl[p%?_B&gK0K4Y5l]Z(>;XFKqTkF^r+ih+0C_QjY1^%oJ/>`)`ZW"%eKGhE:l#L"\_\pZnW*W=;Za?%CkG3kh1,k)V!5ul1X*l:PP;-j%O/tg$P)!<%IkW)LM/fH[(V3E?NW5RKEA[Q&L)>Rg)FsB/pM!=oko%b7WAV[09+$G5reA&6H,_WW0Z+q3fs:]=lOdS;4P.69%Jj:l%6P+`uVRu)=^BGD#H-ua0bmQ_5C!Oe@aQ7-aPj.)K6?Xr%NQQ@<3o-_ek`6a.SSliP>I9+?[-:(*1fN/rbThA%Sqps-80NEeQ&hF-%LKG[4OesF.kF(a>P<QB]0)GGcaPhG6c99'/]VfQ,Ym(Y<HEAd#*ARL;4JZ$lXJYQhi>UAV0n#*cL:QEUlX>;6Y`Iu_U%M0)!'60h%?/MCMAF&[nW>V/I6Eb,,!*1S14_ief^qNHp#Y+@JM6Pk>'1i,jq[<03o#t-E&E)C%!k!P*%6"9h:A,8=U+\PO66PXqg1^eF)pQB4%&'tDp(<#DUC-C8]6$LSH`uWUFd![2)W@u@b?`t]K5nBnD,jBV!)YWe^nA8N@(=@pc7kVS&o+;!m]Ke(H6`qc3hA>[U`X<?f?M!XI%@(kcLk^Q#G&(4D(K;j+t/ja?DmW!lN7!_Xe4Zk2lli!]n)R";7oOpB1p";NB%'4&R6[a^CDl<H_HG-QIRHITL3OtOYXV\-a&@L=Y%9,K*m`\nZTcX07YrXZQ3\GNUl9bfW=bnR.T+$s'(/,Yl>OD%rd;MK8`GV;j+IA^-='muCkNT"<,<Xa9?pT*]LAA%s.+bJgQ$nVS8%jF8R/RYb\3,mQ^1$iO31$T*W`7cY+uDTI;m:h=V^5<Ao3s&s@n$Ma`:I=:Se-5$A;f_"oBE[CMEC@5^rD8HAGM?Ib=iLEC"lYMAX%)X'_NF)CUUkn5jMK7S=R761M(@!jpFW)I55K0r,rrn2kdK:`BEq%pCJ+@hIN<F0Cd^Qq'2r\.Fi;Y7NWp#%dp?\%2Oq?<ReJQ@^.%W__mLmjo_ms8"LV:AXS<ljs'#^VKGlkQO?Yjid<=7-ft3-bEXKauW-Z6(Zs$Dcha9T'?ZA7/TIq"70'(!9JLm01iiUk@r5W#pn9&%?@?)aIOj@fqh!`/Kq_lt)F>NtJZ.1U>ZsAg++,2_^1`$^+&L]7rdZ*(ol[?SkgdHH%::USi<Oi.;]j@Nke!Hnr<Rk#CZ'AS@!:K@%lgJqA=Mr/JY7/GI5WGd([=4hYQge;]38tYQ:4l:;#7&l`DVkX%<=6&9&nuS<4,#lkF9DA@)oft:1i^[Oe-,)SId0QE+D(E(fh_s/%>0fdj=+'f7U/!F[Tp+7?gYmSGDg`$"Ym(_g#bDCU9kY_i1PQrsm1\s-oZ'q_lh"4D2`Bmn:62+.R<\j<8S0MU$`T1n'lj/c(iS;/%]Qo2+f+mdT5ogi7TWT!U(;>$Q8Oq6T5+S?T#$*.c[CmmXIup`-BS6SKRH3@1k;rG=DpJAu7rb'm-]LIUao=d>E=>WG3Hd]&X[[_R%oQ`hXZdD,3J%R`@-`FsURF.ffY9JXO1<4/R/=uc3G]YroJoqoH1Q:tT5QdJ'^b-\lgHW9%JFCr`pQXVJ@,[W]OOq9n'iFp;J@NQY%-3N5'+41i[lK3RN5=7r(*u-hLOC\OA\c/b81\ElsG@1XI9u,?Lh:d:Em</m,NV2Q7Gk%F+B+$%1ihlEa#6$Qc&IN-#ku8u84kC@-%TB_iS/;VI_KrdU(i]tH/LLC$']r+/JPAK(IC$fKsEGB@Dhp1JY#kk1`B"aD8l@V_qrtL1k&e$_4(&Sn-rDS7BA[l&CoIkCoB,K*8%X`*io0/rc`Pk54qdr5(%^jeFMmM@h_^u9jV6S1PG#A]]Cr=F\C-$Z-jdZ6CL$l?5ZZpXEYQQ?;kf;n9>:sg6Jr=277oio*(C2CO-%s'hqeH$cJQ_DKB[/Wenoj^JCS?-i[2)shc""AbJ\qK/cfFVe-C?dNOI"o"9+R<`6ZJUNFTm/Giq'5]V1[_4p%eFjCIR:To;dm*\e%4kgbN^/\jUiqStYA1RNM5En3:=HaX/ZWIb$j@BYifToTJb]Cf^R,JKT6GqH+3C&kWC?tZiKWVF7r>/@`:o/iBn^%&a"f[4GO3[%j%,XILiTiolBdsj/DUYu[VgYI2On'ttK3^/L>qe4AF-4>Ws<d+D-b6?hph[#MI+/F!?rq!npCA_ucKC*,+r1C-Mfp!i'gfL"R9p>JC%f">6oereAXX^s>=s4^'(-es8Ld!ojg;\JK]CDdc>o%uM]5N-Yg#iALNqf=[L9skCfC&%-;($B'V%;2p%JONB[a#c?29$>9cht_2p%qI?qb>jnX8M6eH,mE7^F;ZCVKQK525!c.!t4JEYOEB@W=5$GHhcr_4++S>"VrG9)8)411#$A(U"%)IO%<dmoqjal2^\\JZ7binku%7b-qi.r[l-qji1&n+pH%i>$KAhsWJM5eVN:+9o3JqQ'"\%oaSK%K4RAqCNLY$3c(]TOPQ):V\sa>+;89QBfIu'^KK=I0!\C\YW)P%^sT"\"HKqP&0O@SJRa8\+/HV>rjC5<8$cKN0O)bEIrhs9FEn^"XS#YYI=FTKT@Os)l4,?aO[<fGMc,$0h:1#nrW9Xm>Pq`$H#[]k%VJeIBCajbe6KU1XH8mro0Q+dgF8Z>8D,;@@;43)=0Lk"?']q@++67AG"<@%MrRHuC*fj]U5r*3>mXpbso1r*!dPs)9i^/9NOO1Lo%'Mh"B5(1#dp!H`r7>b:=OH(QD&b5@+Ms"_9E!%1*4Wr9CdUjG+#S=`W.3=e^flfR6%"P'nRjq7!WCLesKUjenN;46+>u]AWPX(lX%bs+ikHMkorN9XJ[SfRI0'oiI$[ki2lP%a`JcgPB(m=ISb#,;f95FAr3$9MmgY]E/KFq+a'f[Dn-o0W%V7`^3+%8=5`U0KW&TDd;r%;99G&.FP<i9/XX.Bo7?G.fnm-g;lO#X[Y@uNKjfifN+<mL%M+/BdO\Qr)AR$D]L4Y&K0W;=+pLcR4RN=[/77:O2l.loM_'9nS75.%/N2+'c*=]^Zd%'\R$p>JZ%A89Yhb%SdkN@a\OC@)jLDs30X;IQ#%\#@m0#=m,iDU9-$2\Z3Nsp0qA)NF#/ED&BXX@leF%9s9A0bl%e9L'T%41ct2\Mi07jQjq)]&q*lF7u@-Go/S_Zf.._V8g];'Yh(R^c@[BA38,=OH26D.2*DftNKTqa1O.gh=#2riOBtFIV6(X%$!#%Z^WO+]2FqRO^N"Ym<=gR?jMjh,Ai1bHD?ES/QJMoO_qG\&(jbTjeZhq/([*VQF?4t%&jJ3d9Vlu5"_D-,2]FAhA]@,ZQP>FkjK"'%R\\b_g)m"fHk(/L<lda6JOYbM@:?4O2K"Yr,Y%rMK6CXf&VgSVc#A*,_,b.2\A;i3]8e=XSkD+@(L_&H!C?F[TdH%T>PD2LG.V#9%Nl%oYC#e/MTK91-2:uLcIA't`UjZ\MLUGp=lNpoH&9dkY5-Hp7@8k2T]%^'InVe2<T0,Z/ANsZf7WCbQ>3B9Td`"["F5R&6G.1j\%(i5D@7c+fXU=Ye+r+'MeB/;k">c]b,[2E]HS=Vt5%3hOR#gQ8GU`1'5BPY.g'j*.0<c:S"b?;b60?d[*M7oUiN.PcL-$RCu9dS%p%D>OpUSP</`SZ5tI>m`Er"")N>[%W#*<SR2UK@t.q=&D2\.G]_>N+L)5je.LIS_0WX(_p"I9?uoATL*&Zol3\L'D2X):r>#$e*3=t%LLC^I<nP;%p8).n!/?F2k.'BdZr8[pnA7i$OJAsQId!%8$P5Ol>2FfZgWaosr4@CJ"tF?p,)mQLZ!f&A3q?uti+=$E7[H_F7ja*7%)[a^rqUAQ"\@bCcquL+gBP>Vh#RtW"Oj/6S[89S2n7$XD2)OI"f$K^\\($Nh6ghm9MVkIB+])),`h&o0bD@!'JBSp8&*se#47_e&%CpG9DL.Hc(PrW]=0Fml$WsflLolN00\GTQ*qsY'H];^/`-I"Fb"C]00!1Vu'_[Mh'5[WCkZ>K8//elK0IH1a<(N<aX!tr`ERVjL4%Ym@s<86e:LZfMCp3<rBubHgA_!EnhV'SDPA*nIB7DZ/aUcChtn,btZ\f#/(=H#ksAek7dAHh>kAMI?g`:JTlT0B9qVPi9c+]Y_k?%?q9G5X0VLMOB;.XkC&s58ZUlTV##QkUT.'7n[f#_3qB-\^9ZIOIBeeAV#nkURbI_NVWKa2A"M_`Yh_'C3-\2Ri<3b::fbbTgr*(Z%*&[35W6p^_M+E8W53VJ!o-mXGo?jaMM[uFJJnY1k?Hgon''srRO!+\.nMQ.;nsmQQokAL'i"rZI?HaBnKb`K]Z"r\<CPnr$4f`6(%"s7W5./g*p`=hor8pISr=WTk9Zgiu[:1WAig@o(;QZ]_#d`@Yfitl`o[9Hr;lQO/a9t@Fn&PIgF!"/,D6,2+PL>K2)OX`O"4.c/3%`63<s&9F%n@.B[&KoK]]/O<B"Lh<^&,?rXqEj4iT(?trP\%2iG[,B>s"eG5%)\hQj+<<%OJ#p'E\ttPR)mhEj\$kN9Y<407bFq9u%BNLXXVr[f\0O*%Cq#L-\l]J,)c[n-nJmN/2.1'`B0T/b#YT&'shulCZ$CLr8ol:F,<AcW-"/HmfX'GgY]0rKp\5+Z_%.^%o$=@'_%BYI,<)Q&4Z7Wm[f-Npg?.lfkm5935q,@$]EG%cpFY,1E*MOJ.;Ci6Lg#1hID\<oPl1n9"&ZCrAbcpf.[BYcK[[/nc$Wg20HaOq2s%#r!<M]<]l&6f8BHIa3LfRd'^-/bV8HlT*7(E2->(5Og0>i1Q/;^m<L5Kj?e5n=4j*Vu,.brptW7!lWba#XlEKdD$jo90HB4^mc8M%*U:":lMlOHs)I?\DLHeq__Ej\\k`@h^rQ<5J,Z)!'RdcFT`5"maaa<I`GRRW=Y'TIm6?)`_`;U"UU"59aE`8h1NmqZc$Ekjbr4kd%/3@pGd5:D3<m;LjF@031J;mjs67Zf.JXu8iSBGdFCLp#mjp'EQI\goD/@S#'^1LusqO-S[[TngqF!Mq`H5K3(c!<j;p"j`@IreZg%k.3(,U5I-.CpGfq$3mEYP+D:%>@XU;b(jkEWHL#d&4jfU+-qZr[3(,2H/D!-6j*S#?LKfHPFFPF`mih2gRa9a2quijlLX45WOnUM%@N/<jR7ZYRQAPpgAp/?i)!9UkbN&Y&D:AT2iEX25$bmL%\Y%2Ai8*Kg0A!UK]%l(8*Jr/1^5r^>?SanSbH&pQ)ga(;g!5Q8kW&M2%h#0dQZL/N?TYblWcW#9upe8Z8m\M/k2!k\%ib5DL@:Btc6'LHNT<I4t,.2ZRNAK$hFrGfW7-+,$kCuCl2\f+l?Kln=j_a^,o!O3J%k20Eh<&S8lOWS)El+10J35"oSH^uV^@s&4O_r.jY3t:iMib=V6m)V:M^E';TV-V0*H[FbKE]^rR%f:>>C$*KtCJu-,iUui\eBI\.%Rse:+R>!)(ED_aWICduds!%AXWOp=&Y;:n#?9V<Pe^1UDgcsS>_TS#;=ZGd$Nr<[,==,$Z(r>l)bZ2))5dmnN%);YPUY%-`l,3E3%&,0+kPKYSp:J6!:SXM!m/]Vd:o?M#g$hI9aL2I[`m/"m;Ii3B=^;91amP_=*_13.Aq^n8"DWitM]L$^4AEL=^Mdaks;9_a]hEL!_%rOBCGE4f*T8dITT_S+kS3g4c,;\%a3N^P&9I#>]$X*!s71]L0nk3Mfb^q+Gj7j=(>qJs^"4k%aCIJe!ToD"#PP!^)_X(R"m'PN`1%E!Uj^#S>Sa#&6O1n8CT[-J-/2#$$osK\f'\_fRF'j2d3Ce_bbhD_YijKD'BYan4.Zf<^mCgpfBA:&TO\-9>'PctW/d@_RUen+e$`%Gf^*Fde,rpkI$YIrId:Wj/$HfaH#Wj&2<Vp%Q?jm*aYZ<]<%mq21)`mZ]1tAD-0-R]FV?`gUNjrad;u[4eP1kdSJ],FuSYdA[alD%RY7sJ3j9:f7N'j]RNOW`lqV39^Q2&%hfh2No+jMfI`ql`ms#u\ggPCf1@+.jFKWQH'i$;A&N&YrVqXA3&r]7MVb4(YmSsP:0lb7r%m^ljI=5@S/]_1^!)8G/f,%>SGp5LJ'YaRMZlnm4Zk8cF(J`fuDJBf'IQtCf#3&Ce*[5>eJDJe(K1qsLW%GQkaptbZoSV*igi^MAk%9el*W%\duB&tP6:XNm&J4cCAR@1psmVUh0Y@>e=sg(c^.0aLM1kOfPl%u6[]HRd[>(3bI;nD37u'Ydp7'0e)deSnd7kCVYdaAm`+%$HGl*?CVjGcL\`SB7>$!AS/2n=f5KQ2^<EAF`8@;o$6p'Y@)O-]BR=[C4Xu#c'aZg2PmgX/N:,&6@eHL8o)9@b?Kg'i;fPIg%#qW%PP[;7i4j>c_"9M?2@[.TG33nAeQkRl(9TXJB`(0s;#'5>MDq,p>;rlT]LZ-.])B<NmgEh2CPb;Z'AgPhDnZ1!j]<AB;rD3P/j'1,%aQC>1aLC34]H)XE*o7)W`.$*.2npkGk%Q[NSVic>DJ8V>!a;7/c4KIA?Fm[c"o,"*1$C@e@@<jE0f(ss6MY`Sj2lUj'b4=B\),9?%Sb,sbRf`L*A\;#PPkJ-=pJLc#rP4_8^o'Bn!.@0E!"+/[s'"*h5sN9j]!/mp"Rj]EM11?\MP0Ip@OUkak^b>^`;Cd-ZFC3qnrmRU%_`J8Bh5%!Upp16gDF4-JqLu^<oB[S32M/)$)%;3@/),mJEB_Mc@)h5$%h0$^IC3XTbe*>`#F<$H;jLl0'E]9f$[9cl^9Xf[knblA%DHb['mb8MWZdaO\o45\q/+8coJAUs-cNjbLD">I*r+p>:TP;G$K6Xs2%)Pi"U!?m-U^92Oc?DX8AN;K"o^$A4N57tSmfR=Ra8p5/%]&P0P$(;ZJ](rU92#Fd5r08S8)AK/QcpZf:HJs0\T_Jpa((*M6j3V?`$m'BY_IJ>rK^4SjZC$ljBH?[S46HCQkURt\_NcH$1DW_O%@!JuOaihD#>QkPQ]nS5BNMn0WXr*%$9-IG,7$[XD_XW.lNQcgWdlHAuTArShiZmDr9G'Zb6"<"mOBIm5j`!?%[6,.`MHC8UR[-qR%4;:J#Q;(d?5K">64l(F`XpQTcf`DCflk?NhdI[d3i(:'?rQpB9%!MBp9+GDCeq@u[FXAeuEq@fHD0qG:IJ$M6iV_;$YE/f9-+J;"%p6(*[N8mpk9=!_-/mFLI.%eYj%t<aW3H<p1e;M9abte"mpKY-&Rh6,Ydj*>$<N_p.ISg4:[?cI[M?CI9Yt+8W(O(9Df)0UcWTV:P%"lK#bP92hiSkR5iEs^W!+u>VI8:/&r0\KWpI?Z+;cGUQD+-F-BX?tYE4C7)(7i-mP=KW%qi%4r4\^m@-`^^s+jT65@ps+4K@.U#W%o:57=+A:ruTBBaG#Ad$i38,#^\^Xu-hXQFRgf0,uK=5L>QsFWq%(;28FCMfo].;P!]=u0,EE<^4r<jS\m%(IX>3Q,OMeXSL!<BPo%juLu"B:_hi4)AJT.n(X56RSRcK@rF#Wk*95T5\.(2MV"k<=(Y\APm6>lg61+4%Q7`'d[4@VIq(eZ?$(DbUc)EY/I<t/6DqIA3F"a%Rn+*ok;\?a%,mCk=5;R>U/As:i)/9H9u6R\>;4EGF-1LY]9?TmM&8.6F^M.cLb]HZb>&,Dk(+b^"Q0+S2EUjk_uSn*O.H5F2[n;D%c-.7Li8$MT"3ajY0k8;^pr^g/pBLU/a6qg:BY!W,BrZtomnfkmc[WGb0aef354,h5r+c9!1I[WBR]i5N:KM1dKSQs-k4pJ!jKiup%Nsqc[N[ar)fR,t;4T"(0a3QHWg?]9ppOai3D<"q:[rmj3LTE;R_7gmEbE.Dl78;Mt;]tf'R`#3o]ZId(j>:J^j(PkPke"RNPVRf<%`_/;G>D$T!\mO^c?.HnWBE`k@ZSXeh4&aX'V,X\RS,o/eeC?(Z:!V,n<i8E\d'FUeBWV24I.4O9]fnO%Z)OKYKB4c_KDAcFSIa^(%-!.69ftSj26H_QcCre!fQCRl13\,VlO^;BCD.Zg6On?MJHmlaY5*j=6YFP4l&4+_P*p.d=SS`#5gt:-\UFZA6`Vg+<UDe^hJo71i%Y]@(ulR.SCl2io$&J;oj_:EncV5kVG`9QF\lJj9O>"5&6qcRjQrD.`\g!VHH:Y4<^E7==\HAQs]&&u\/1We"Co]4+Fg^O=rD6A,i%,PKcMI-,c_VCmmj9FRoXba4T!Z)/MuJ^t8J9gFPK)6Go_r4qnf'AG3C@s;o`J6B'k'4@bo9p8qpFXFh63:>+Vq60Xf#I__p;E//j%Id$9MU]]331FU&j#]0r'i;L-aGd;23Q'\gp-M[/o:-[L*-L""C;(.ljTAe"a(fAp^!NDkh'm`0VpZ0KQRN37b%GV5rF1`rWI&(=3%2@I3&F!imNH=[j(UGGuVg8qr,_q5P7di@F[[Z0/!NK)2^cotoh#%/$[D"A-`BImEFcs1F6RBP+uEOXsNf3jI`L=!)(BOl]H[u5`d%BA[1fQFk*qdfm4pikY$#cZgG!=e6_NUiWC@\PC7!2`+CDT]>H]h>Q9$0IsH-d>L0c34u:bqRIicCi^SfM`ji'ApNS9SH-nO,gsqF%iNp&Lfe'/Y&$99Y4G9hpgF]KQ%o_3Y8;>uYfuNGPP-aHk/tt9n-pnfpk2-A:Ep?_6*ASVnFTZnr2gACmCr%lJi!0"YL-kWghblSG%W!.GkR$kst>=3;`r*F#K2oZsoG+bF5--C"kl1E=R='lIsd>+t3h.BTHjf>AmbXQ8k1RQ.`.EWC],Ft>sLHe:i\T.8rPCFs(AdLVq%5EquJli's5]q3gB&lsR+T8i=!+$Or1!NBU4^d*bROC+#6U@WK@Pn$;'fPKp9`m<BhXXG#k95#'`VEZG^ChhBH)=NE&3pN-2-&n9=%C&:]kV,cq"ijkT[)plO42lYF[3CuXt<)4(n'LKq=Cj%pF^dV$ta]K9J8t1)g,,giQEUg8T,f7MulM(7[_bCfmaeNErMk^6t^`>Z%%eB>A0(\F7(<VAFsA)p8$*e3;RiuJ'*68sTuQJ'[E`:Z(VX(@U$p'Gq4!17?VR?Cq7/?'MNSKUM&^<`(Y[bI<n:rp[o7T17NZ1FGf%ee>keIX/YY"`410RGSTWcuK.#(htW5>$kGI3.'NP;BUPPmH8]@<%q9MeEtj?2dTF#)2=-fW]@>X/YfdAG+A1HMU,oP7<^6^"drHr%j4ho(lO2"9\RNEDJr('Kd@oCTbPRUkp9%dTO'[riq13Y+>E4Yl+]i+@OQoBOh.hiNWOl69M2FMg?AOO^h!F)a'i/X`KsJdg61AUL%&Tm!f3o<;]Fs*Ce\uO(I;%QVR\-YXrX5IaoO3+Lq2hfs857F[pZHI*K+dODpDE\bB%Q[DMFaAG.mh$8,HSpC:JD!0R_@"kXG7o7A%pq,ckbA>NNWG67Q1Pls@Ms5S4+N1B^g?VBISq3lT^%l)l$Kb6_bqIi(\OIoOLh<Jm-agbeOk@6agfN?XT<4#pXD3I8bT`Q4@TS07%*t=o,Mm.VjoL1"e)TO:EUr!\]6cnK8//F^nW<4e[[*a?aE]1uL]Q&kVNb3SGd1=Z`5)D0ZDUBMe2r.TfFua46GJmZWo0%jf^V4)(%k5=]qoEdY2>SsD+511iN(6n<,WDUQno%eP)2M:&h','%d&e!Uu1j7_-a"Oh"_V#WIYB`XoiW'%/\`D<N[U%kn`3<tZa9B%&jO[@Y%;6XJ(k%o!NB2',O!tkOW53AWtoR`7Y^.3JAL^/$?IC=9[J+BNoH"OOj3+LCBN=*@Q-NlIcZq,o.-M_bZ\D<i!F]ZC_EP5n>p2YLM%`lq'mF2K>XSG6AF<b-5A9"!bE*>rZ?Jjf\jh"Tu\$#I;_pMRVk.B2T<gN+FP)dN"=1JR)"Lc3*'DAESY8SWfgJ);.bkMHhoHSHh.%+7K7=o]cO*,lWmC3`@^c'DkD=RebqAVO*=Qgc*$j?kA&<likS[MTc4cUJ^6OrV7'4-aTZ9Zobib51WFXrp9[-<NGX/D@]qIg0LCj%cDU(ogL,,XT,k0(qjbDgd.6XH=EDNPFCPo1'e/,@>A@r#]?+&'rm,]X2R="!.ZAn^c2]1l!NW.qin%MY%C:Je?uu%0B6^)U3-E2S%.S`Q`LiNoqhSZJa>7.oGp=.obpH/$5h9N;j.<gI.8i2h]Zf=6?*s"*#l.=]9n2Z8<g8+p<8\.LLnsO]U_D>#(p)?$s_Q'YaCc!'=%@ZOlKIGt'E5=Ki=(8S3!^qf6jU0(dJnrnPF%c1cC>QadpY!T^.TU=4;;7B**[m4L?.q0O@49]?3_mBM_M5`FY,9*&CT1#[2l@I^5%3m*i4Du'D,`W6a]NeQ4pN[>^l`5HsJ1(+oG._\DVD5?+(;1El\6g_XBG[\Zrj%>R!->1L1o%CTAbRb;mT10l`fsXiG]>GQF.bocW%k>Dr'N+Nb4Sq>3+lK_-Zld$*PcQ@@#dQCD\rhLDt$GX@=$B`9=I,CX_2"R4qL,+>I.MNB%2C$nR2(qCj\T)5ja)P>Blp$!T(9H%[%,[IV-?W!E?$lI'kPJH3i0fI<R(4N5pGMWN%Hr]clgu."deAWPQ=07,JjE82u.Yb30'L%!N6fk"L!Vn5\,P?(@Lds,+0(Q:#QZJ=-%jgK>`1Bac2&p^[(0k?B[N8IG..WbY*rUr+o>7.>J1#a!$g.0H/Sbq38?u6d_iR_55K7s?W#ZjNP*lp"c#GG4CP">JL&Npo5Dj]8A%-FY'd\uS`3=+TTU"u;n%d#CPQcCDpb%?mLTo#nP=(R43#2?UP36q-D0#+KhlF$4ah5(8,T$!.2_^`&0R:V.:EH$7$>^\>P1'8MDM%qRc5Eg2l<s*)WrP1I!"IRlr;*[[7"bE+NM<b,lXI,E:!U4/g`imiN+5M2u]Mkd0j-=Y&hp*R<UWrZ[i"k=>`j_iEg$^uP)I*pepJ%FQZ/dI"D'6bg/Fsk!%`/GQ),gQN;`33%s)Gmeb(g:N0)q75[D1K=,J*(n<6dH(E(8m#<%qY))De@".G=%H]o9Bs:IL%gK)>CGe'n%hMMN<X)CAmap,o5>sXJ9#"SF8kk3_TX;J.6+_uE7CjfMiTRs_"+Be_>pbNM3"O,]`3tpSi=_%ANDlH6=.4T=%aM2?.7`r'DkG$j.%<uRN,QJRb7PN2MBe&^R3H>UY-auZ6%j5PgpKW!?)1G&T-4%kFaQD/c]V89Qc*Z1E]6JC@B[sT*1hr=t`[DCN,]!W_85ojT3o#UQ,%`Pp$H+S5R$S5+\_lc?hQDr*UQoQrH$$73$4<\j.K6]5mI;3ekfZ5Q2d4:l[@i_fAW/Co]p;>a-*X<Xq'i+aTGd$/bacKS-Ji6$-C%#=AkY)dZ=5g#,uOL7`Krq0&i9b72@!pRM;D=_>?q'];OB&BN,/T!ruIg&uC2p!N44h#:Jfmmn.DQOm"K-g0W0cSe\nm5s2-pf^oV%o?2?)[sb#8D7Kn).#g>bBR&"r*k:aZm-kpu'$q*jrG7703g0[t%lF(JT2S?I^T#Q:?!@>CFqAE\>s9;X:lGXkNP#lr5YH[,.6X"&%)S\"F/]RHQ%OeabFrPQNlbM0JO;k70i(_3+J;.s$Oh5U4*b_5<i@VDlcTG#I-Z<o1S!^0=HYCJ%/`*XGMEibY>2V]']PX3rqAB&Y%#d!ET^c/HG;fHB#(B`uU=cF:4%+$A[75Ccl<k,ZT5RDd`O;H+>h=d'/Hl4aTJAuoOp1WHJ"o@=q4XpN`RDPP8e&$_PbpmDOD9T8M%#Po/6$G9)K:-"tO9;4fC5[duP@"VCI,srI0JHe.UD^"CoPQcA3R"UHYV6;KV'Lh=O577g.%GdK8X,!bhd([!Qr-jb5>4e[DUc$rD%5]nD&JTnTK,QkF6Z:]csq&$XATRl5ijol@DpUI[JFqG"Y>lmu<g>8(82(P`dNKep.h=nVbd*QWS4t:q/!R5m3m%7,`'_.Q$XQA>A%lA'\%a9$58=o=.BX(9]JPlhBa63XqQDmO)gOW3W[VHP/c]C.YY/C53VC8)!@3IPMHYKh5Leo&n4;Vf:QJ_'arFs.U8QNt+$grKL"%SW(@uoSPRh"Tio6hUc9q-P,hmOmd]]It#NArN+>g(arQp%`eFp$'#?"5X-ILcgARq&+oC)Z`HYAIL/iX[t2?gb-%!RJLOOH@8HsX%Bm]HXAORAJjO&*[8:A'Gf$qb\qiqN5^)-2l5R2b-6tgE*[D!X`oiVpYP'Ec[n$bHG7R3M,:k1m928,Vh1K!DE!9cQl"hJ!/mhqe1%UdHn8""a(&)JH!8Pf8O,8T!2gY[J)FpRtV;]C8o'BQba(lF8A#KP7#MU?[mi6K]]bpl0k$NNm:7"%?$'YXXN8%ort7=1YD0Bl_Jh%DoEjL^VQOEL&i3>G"]o'ZR3FkfS4q\NpQL,@\cV5o@H%#ppBWd/74X5:;QKVmJ3XbRNGLIcE-Lnb^nH0Ab#U?_igpk#gmEB:Ufr:%JQ.A)e!i;,kHn-7.`X^eT145%`jbNfC&cAn;=*dtg1PjV.R'sp<_8qSdm8D0a$5hc/9G+2)%K7GDb!F^;S9]>T8kM<;9?Fea6`5L%GtQl1%OfmL<15>JkHpPu3ERe1k38p\i%ZWErQ)tG=c1<`s#,:ZNJ^M]G#+Tjim[^]0D!CP4eUGJ?:]Gm]aZAQhZXae<d]J:RkhrV%_ptD_;gR270UG#jMGNj.LB4CL[,Oa8&BY\[)gk+Z9]9]ijNZT:feLOKGESkaf(1fA4O(It;Q24T^5M\As'-bSG%6[mLZP*Shc"[V%;fL!cPD5b*NR*WdbF\Be/DVlCR[FpXf<!=,WjlZTSIq6*Si+#-d15OS_B1`5X^H,1)Hl.ik8LOsm%Qtp)5K+u"0^V'Y^2MEnQG:P%>g-qJR"QtXimr%a*\HdGJ85o8cG&HbZEf!*q6n?3%_s%(3I&$)g&8\j]'Ui*g`;_P=UTdAikEO@!mo;rc?.gt/@mrG+j`L;>nJJ9%5sL#H:iBe?fG(Ib@^'O^*%Ct0$%W;L7KLlWA#:[T3\m1CH(\Q]hG2/s#M(OOE8oKZj@3<XLk+2?MEla*pHI!90*[>_#6gdY9nMj'%V#[moW<a2@j+V>8ENIf::]uZ'LT*D_\A?DlV6(-#BNAma7A/9W;$;dCOd9ZUaXCXHZ_*YBY[u]^9=^A:G$k..l=dfVmI+-UXY/*W%$8$m/L@5t-Ob#6:U`G%p)DAVXetk@["7!Y*VgstFj^N,),SH.resuZ1`5XiQ0s3^g8Vj=%N@hm'HF2ZA'%)m4#NLo%(:uS'>Q$ZI%07K$u63nk--K^B\@Eeef"uH^<`s.9A^S.-Q6CV*AANWmHB7bCps.DRcTtN#fX?lFtJl39mpUcT!;/SV7=#2UdpNDi\[*AW0n`$;N%BEV+C8jkofjh6qPab9[:L3u.=dQC^q;*rjD"KC87!j):WoN@@61*<c`"=c.RI@pC1obbg0%mTr5.,^Me]O6+&K8/pT5Do&f`^8!Z%o1"-4d@XW\I!3L!+iCc@R6N$mW*onLo=)^ZWe"9^/$(=&3[=!ZT>JRk%\C0nIHS0WB,*X[jld0g4.YqM)SMag3HVVuQ<:lFHaIf?%Z,EZ_``RX5jn"`R:TaY%eW^"];n*,]q]*a&!h*iR,>YqT4@`]]Cn,burkhAT*HXH??,pMQ<86tAM.:h:;ORRKLnsUCU%sm*XTuD1%l%B,&-s"RumtLn/Et0ds,+mY&B(fA>B-ZnrEZUmdX=kV+EWt>'3$=Gr1sEGR%-YCd'W0!_+o4Z$knjY_a<HWm15,0IYL:n-j.>?Q%Ng"HJ8=mg(YK+rQ9ItD]6`KAfGc@J$j_VKnhn8>VBC_@-[L&$3oM='^fPNUpJtO!`q5Rsl&#U*>Ja)6JfK=*AZO\:FBL-'>ok03t%pP6`r`j.,;ifto%[eq7:Q4c;UH-'@HF's^$9SqeK8k)7k)CMt%7*=\[lBt/NMT_1$@aph,Cdu-!=>Sd(W^1SSTq^?/d]6I^dA3SD%0PRte7RaSRp@/_`SlcM=Ic4:9\KVBC<YSB12]-@!-o&"\Mj1M=a%`,%q26.;2ZJ>:Tl0I[k&4g/S3P^Gf.qseZ&2?#e!WKe0l^jN%e]"&tG4i/l.1c%"c8s*Cbioh*\*M>8=HC&I+:$YZ.(0^Cg38oFE*RUDX^i/.f/bNuE!:Bs8LnSepbHbdK3$#^?7L0@S#]+lk3^cF%KZ=QBAU6::L,qo#>170Q$Y[Fh&R]uI2s(LIPLsp!ZD(+VD$lD>.%KO38jO4)nQH6tBQs!2&NS2>!Xi$b9uOK:(.:PPmgL[9`*VF@%3YW@.8I:*R]1dTGRr:i9Bg-S]mKVRDmrLR0$c:TdWJif#Y8SRH!`0/;J0h-?W.C3=j&[]:8GSY+Ta`<dA(LSFPn_$sc6TH=V>e15%"].BO!FuAe*HFQWS/0FI-95088(JI_f1Kn*Fp($@Zm#4E3'Nnt"K'?/M#?GEW'-`gqW%l&+)q80Il1^.,dE78LrG4\QF6:6=CMm:%)l%J8=Mu^&&XR^iTR2-i<!^GDfA<#89Am'@Z7cR-*oNgHWE<3>p:FdeKT.df0H*frS3Ad/k-(GZL52Q'YZc8r8Q>ECA_A`s=!!@u%!$D.8:)]4q"^<uh<R6Ku/1YCD\0G1rc6LQ<=<FRN3$29H@Y:TmdQeh(.M,#e2I_%"411Cne%c2lJr.NBkpi6F<P49i@aE1Y;A^":%k(V0SCkjU_3C7m,PfcX!\e(Gj1n/#h69A>F<iR3#b")8t>EK)Z^8X_+^9\#Si0QRV=J)Sp8@D5YXU5'MM_\_Z[]DT"Nn^iYi+2(M%VmI(NY[u3oPsq(RJOTgXfi7ZO:Q`7?@,k:JGRHVt<SdE#]O\D`mT.f->oIVrG/]?qq)TB"NT):=KN%,\Ol]S*Dj!QXFH1!G?gL=T%gQ1"NPkLj#hTs;*'aK(W\0%h'TDH,hG9trb<4"87m8Ta!!iK%7De=!HX$h!(T"*@]<u.^:C0b_;pm%d6TDQPi^-be=oC>9&-,`d?%k!#Zi[W<Ckd5WQ/\X![e%2o\sP57<s0,cZNqfIgp(kIIfY,9V##g0"+"H#jQCG_$V&$pG97MF)H'f6io77O&o`;5MgF8=ZCmRM.Z%Lu!C!=Lii"O0%Du-OcIZN9n`($44-NjfK4Dd>L_I"HV^g2NE6MjBS7f!K/kPO!l0B#*UnPEaDi!N(9,65k\&f08;9bqEqoK\I[-%%=066"jWn2:.3Ac=Rj>-#*2S13!Q/6^@qYK[P6)m@mEs8klVa@3%2oWBkHr_`75729*<rh!o>f?]6PuF_C>ZpI/ih$^[H0u\@K340%^"D@lHbET>$bAZ?T`uReZ5UHWYD$3ip'@FAr+`Y.eQ+C]DjT5QW#*"PnC1GHpS2K\CKnbs58VuHHnYD$aQhim=2U)+[<OI5(=K`V%)HXi5iD)-(m<B8::>9M#ZYI_%imTT7UDNe\J=4QE#YD!LHD(b\nZo:X,AWY62[u(U:9/KOBsMgq2!k=_1l;!Ik7VCTbtIm&/2[UC%#3bmBdDcd=,J=pCN>s)p>Y&gfE>Ts-Y(MEWlW-JXl`rqI,\DIm[uk-OSsISX0j`:6!+BtKK6W5TA[&jS[Opc<C%k*_h@6CYTejIR%Y$/F='5--0:%;bj]`B9(BARr<_@>k'\:Ur/<0M5h*,uZ=SI$I9]JH?D=-[.='#B?gJnMpD!I^K\"<A-(UJHS`V>Xc"E\=P%6`46V%a&j,do&nWOWE7I29\68;;m2k3B<#41L/,F6:0]AqILVio"WcgfX45Lq=3qse$_CKgVd;Xo4Ecu.3qWikK5/4YCZs7ukkGLsbA-7j%gYmJ>/(DqF=3quBYLH`CVik,5XU@jg5Ym]_0b7H$eOf(WGTXJc4-o4Wb)o^jkqITZm"lt9:fDXI@B5h0,RlJ::6pn#kG7h?;*$./%^YPF*,[TlaVNW:DFI8u%R8.sL&];cPRGACTEi!0,4[)i"pHuZ"_GA%Of\L5;lp:%!4&S"m`s:1LQ=;dmjQ^9?pr^W=c^@0c5j;D3%8e!4@dG1Fu;(7p^R8.2Cr0aN,@ZR_Qgo26h>#R^46"B"IYD09$?L-I-cD4J[k.9)NDl^n.o.l_qk7tTL:B`a"ks`R/-\n]IdtCMi%b%^BANtOoB'dNrm3Pc<L9.I<UqD87,8R0S,*:DJgI)!_s>anLV(UUcea.2";?][N%hQ],8aHWgeHQY0?EB9:1h]@TMZBotrE/#bf%#oq58)bHD"hJQ\"%O9W2.]SnBno\=IOub'bN38*(q"@n?br+#@%Fj]NDFHiAH'IN/gD`SW1`T"/6>:bHS-,CH/(%<KBKD:YImOpe%W$m[6b*[gMkE"']L=PCV.JanZ]!&fR@jNmc>q,/uU<\cZ)Q-Eu=O#%rSLLE>S3sPk7j/kGR&#$To@@o<;k6P/e9[+_lsXa_2!1h_%m$b!:%W\_4Ftm&_8`\IsmJA*ST5S&EAb3o7=*+'^-1'orSoqs(cAGmI;\)P,MAg))OujXPI\r/Aaskr$*1rpr=0'B:,l=OY9l#hV%OVe?!r9'1%=D9>$]EumKPTA+J3>X\W19(2A?hk_s*i/@2F1YB+9]\kg9Qt?DHr5//?-=Hk'.)b<cg=JN4[6h*.pl$1J'*r4Ngr80%ND?M4*Jnr/'N:mXoV>$1o$EJbUfJFYY[j]*jASH<B0$?u'-f94'm>/od-5f2Wu@PI&K1=O6tTSa6tD>KQpO3<E`,:pWJZn<)Qsg:%nJbt[29-FEq't";+G)5IQNS@Cc_>H+H-RR3_43#EA:S-ePbFWcOV."+UC+BDV%K,Q>XV&Xk$9Rl"Vp9m:n2U:,"q2tPHCBWCb/YK%eY+$&bNqg&&ggD_*Och?_knp.\N2gN",i,(dSZR$TFMA^B"__gR$0JZ99T"YnhK7iP0Tkc6`ZQD)obD+2cU<$ZWcYZA.jGgbT90*%3MU[qek<$C#!n;BY;B)e7BI)!oq%Ji;Y;juFFnhK9?ukP?4SF992a!5]=]2Fk:pC6h"_95o(?rLf3+VD%jt:gJL]$L>Ru%%7I!J;%E6"s^Y>YseXRX2c\<Au&:_/?5b(GS]P8l0*(b4(RST,.])>.r>?5/;*Y>u1S8>W++:2<"_[U!6F06V>H4^-^lGu:KqP/*WZQP7JD%8tsTfj[:/jp_'*bU:+R.?E810+E:F>3pt%6WS*5WEG;Ed5Mj^d._/M7))S."MDA.NELh,89O#NC0]1RSCWAaiJc`\.R0\d]p`^;:%iTYD2<E>Zt7uO&hMBR(bBkjrX`p.S!"DTH6Mjgd<m$1<J`r3so@\"i0d#1kNc8`E\H[9jfX>QSL58*aeb\qkSn?K;)2&n?gL;%KL%_\a.=4TgIC[9cO2H5DJ=*?h(64f7a_@;QaYrL9C5,IB=.V"S^2Jq1\J'reCgWC[!_]gbF?lK&p!WMj.i)AT6MT5.E%U40Hi"+@h2%lh/'.(@R,q.%QHUTh@i`hrNd#k@E>=?4*UA06Xa$3#kj0(;m+5mUqj&adiN`rDL.8'Y@*h*'3=T<"*uPZa39_cl#5!*)h?!.@a""%`0mH@Ee^9(D08@n5<J7#paf1%:u3'M]roY1bT>6EB7i7oFAeGbHn6?Y8"Eq+ZCQe\SJt:M8]Nb+E!`#V#*.Uu/[a&Q6(+c"eK.p7%Uo.pL%aOo7Z*%shMuZT:46)k%3@)fgco7BEVo?VJ^R)PQmIQ%11%eO[-(aZVcd%+p0b8JKmtFLepR\9\ku+H[a_'>GCc:=QU.Yc\%)a7?>Zk0"V`14cr==SH+EC3g<l7DKGH]m1%.k5_S)qH*aiF`2<i7)Y%)qIX#DJq!>G2&M'aJ0"T?`U:/1j"X.ea=pgrDp&)/%VGV%T[I#FQt+;?Pnq!*X/<F3%@LGE"P&0+[:2)3XU*Dg^KW0ff\u`&IREuCV.-p:>2@k0Xhnu3C@OP"n)LI2dub8>;QZ8Sq+VGLE,tr_%>>ulPETOt$.04i\Qr=Pt#!Dn'n9I]>p>oN8BkeIZW6)I-DTWX"ZouegRAI5*P0(+?"h1^C8=*9JZd^h-gkm[ca6I&fkfLK'o2C?U%WbAN0d<(2V+DRWoO4CGFo;ifUAFQ+NF/ACR3Os6CZt"77S)iY)99Pe8NnktYPtmJVa`I&^EZ/g8OlZ1@lOl4sY&J")nOqq"O&,b\%&]+I)3&+e-?Fs]mdg%;C7]pbZ,u^h=KHnN=Od@8;j;K4G?DQhgQW2GU@>LtVY$+OIKZDZlal!#=8N!'/[=*99kG?^NE^Sl1X05Pu%Ve*X6nnL3;Q&h85e&b%Jc\PaHWMYl#5#@fhFfXa@Z_4L*9da"8Vg=B_=k.V/;=!OJe&g.gam?]I=A:/E98>@JFfXc:`e%AT\SU$D%Wp/SV=&P6,Kk`Y/eLJ-`kpk5*Ej^"`o9?CU9daT+1NECE<mrKeHEULH-W`qg\b5CueT<2-n=EWSVds"<\!g(;-9Rc,.YmA^:9i9K%ku;\MY#nCGPq,g,GO23>e#V`o3`*pr40tAN7^bt^4]^19VGj\%]N-n\U5$3n24Y_4FXCshXM(&t8bT>l9d`F>nL6<HW2>d5!TQ#\%A^tm3PR\Zu9bjX:#>f$Qor"n*&Elk;Uf5%*;Q[r0A6jS#IuaoJOSm7&kXf]n47FdX>8Kp+e]FX`*5.F%W-+f1Ae"\:c^hso%6ETo%MFI@K-gIX8jX)TVd"]uBc*-6/3mB'-gJV3)KoaUFW!+;(j\,iWK2d_l:gu9j7d<PB;bgn]4ea3!fh2/c^G3=Q+5*jI'F$XJc(1/:%W63*T&q!0%b!gM%jWhoRF*C+?if%[@AE;kAU:\m,0p6>?cHT-Km@$,U;Z_Ugh47iK`*RM/b"WQ4?ZW,,,n'75C[SR$$b**AiLDEJ%Z:u<9!#e3K<Q3*)8ZeoqUO,p&4TY>NQ3W.fDnEOC;.=aAQ"u?ektWZW;QSk7?!ID7Q!#W`,E,7CU&5q1$;"ca3Z$B]$.aM4^qR3I%.Z3_hW>@4038a:@H*Q-JVGb\D5;aAe3n'>;XXP1r3n'8>Xe++&2;_C`+12iglV'hG3P2/SmtI`8\@<X2,c['r8Nd$IahrH<Y?G&_%Um!,NpEh^uf/aWXFiE$XWqDXt/Nf!ZEFgK1BgOOqYGIAG_G*VIKV5Y5,WXBJ6]W;E.<k(1!6Whf=/\fTSpN#0Y(Gen:$A[U?57Is%%>OB18]*\s7rIf`S:'QiebJ,]eNsJBG7:0ocG)6'^B4OC"F')Z!H]uM7_DuLqXK$!YL\l_<E6XY;9f,)@u&[uO:fBs9>jY3Y3*Gf%IHBu<m[0K&[#!ZE2r%!nXd7g`GFfXDDn%m@o'rN%,1W1R0"nod]A`0-2ru(QV)@+oGMs!T]S;Q`j%aZ.dcq.d%<o\$d]QJMq^Rrh%FLiOjpc[HW;5nuU;BQ?i-+sK?bhLa0e6ZgjI!iH&/tKQM$2((X5_c&daSJ^<pEUgKk7%+L:g4tdf:5t#/tOb`C6%<<p$FK7o:Umg%Ap#3AldI,6D]4M#%TY=GU)_ATf=@6#akU8@ZRT;cF^bq]bSiH10s/Q"W&&9gWMPQqEkaZELe6l5^1h]J<K!5jP[p>MXS\pG\@uZ/%@a\sB24$<U&XQ+(1(:]lbnWsjXS^d841Q)OYeAn9Nuc?&NJp#t]uIITok5i2nGk?0m/6/j%k)V'lQ3BMO(8>_VJ>%6NU&kKL*B+n%:23crlJh+NE<M*$8?IU-iN]7%Wd$&M[rQO6S+0HaF15\VR7fT0Xo%e#,6XWr:NUI2gIG]5ZQsF/oYQ4^]-<-;T1!78O3*+fW2LbT%Hi)6:&r*DSPuENA[bDD^,`;&!PEt0a9%.7&,#E3oCR;1$_`*(!DN3V0m8KtmmmHK2]8^/8B^tf0NIeBT(s+pWjahcQF:Xj8V)7Qg%-sI2e'Z1'^K['EXJpp:VUWo7o/sNNL;n[1RmhS?pUh+f$plbd+d&ebdR/9paL[3%_"m^c>E\rO3`l\kfq=\(pBVZn'Xcrm(@%`,(%\@D79qP"BTT5POaXCO^pS_PTi"ESLrpIJq(Tqt!>e^1)cgE'!<[_n@ZCaE\0^!$#j,`K;JO;a\FArY$_R8n@$6mmU-:Ro?d!`=S.%nSV/u4`0bc>KlMH9:M.j,[=o?eE5)JQs->F;HC"N5d+X0Q8WTfk)pguRH5QaH^mhdiEY*sbFP#(V+deaC]`<N<G@>i<MropWT7`m%o@%,L05Jfm]uR/@<3rqAZNjKl&mO3?THpMr1p8dtBk]q+(aZme?IgT/=q!;E2bcim<W44O(TXV7R5*h+mhP[OCY1=';HG3mc55:7%e8ZL#Kb9m[IA@eG$K:*M4N`Gin/,gJ#KCJ7O6&%OZGp$+?hl3gn=U[b,mQ_K3e]8cGqCLc(joNBR@VHq9[ar^LggEIUgLXS1!kV)%qT/VeemP`MBK-hDgaS#X[06X,fJjF8jY2'6-P)&D.Y1qjEK9Y/k7L=e7<5bslqQl3ZdZ'g4)252As\OoWg!Qkj^'Y;%_IqM3D`1:%Z+*)h2(f`^4=X(V(W`[U+eX4S&l<[f]M^1+g/A^K_4FX6Ll%s7VF,\G-Zl57YH^DqE[QL5cAp_TUE-OjrQ:$Z4'p*O6>,RFQ`!^I%aNim=Gguj;MA/-#(KRmQ2:MWc*T"-'!4CAX.S-DU.R:*nJ-sl;`[X6U21QV)aXU;@>&2]b[cKM\DoZVnFm?6l,?97tCB0Ede#QdY%W3lhkh1&9ILZV7>e7ntZnr_84;=Dk%5,AUJ[nLIO%S+M+,I<X0='j%)cA/r*eX"pcHnnR/J&.t/dO<nck#+Co[QKaK)DC26js+6r%;EjGKrfmH%QguStV0:*Vq%Ql7.ppGC`)>#UViZf'bZ"uk.h1'MYFdk>.\@/mg:_s@C6Z?\mg<\piHtO+F>hX2Hi:<_gKo30+'Wl3%KsRIPme'L#OEg6er-SBqdr]i8hc]W;-eC\`eg-i+YFg-D'XIS<ENc!$4W&7@hdr'X>-erhX7*?@rRCG,(sRR#]m^:<>Q(qL/_0=_%dsM8=7JHZK"-O&TSsl@QFKaTdop+^qlR*pjJm826E3eVQrM8#Jpf9Vuq^YITf2$fAO&r/`j*C_%Y(=dbob670ZeCtA"YG5-hhaI=%k.Q4a^$l38(Z*31EQL:c+5c;q.+aBM:AhEQ1t>h/`7je[Hi:UW\,%gl&7'[eT6aCdr(TZ;POJ0C^XWkWjXU$$@B!2<eaHVZOOedW%e4k/S<G@eaG=lU=cbA",%POe/Ieg[+l=RhoqtN#*l_f34hj*Wi4&S/8q*)NNW\E(?N_Aj6P6csi-n"/^oC)>cVU$=?l6gWSeQMYC%SR%M([4:Lf#+\#%,r&B0ePEe7Y(!S3C%q.gH`s'O(TI2"HQV-ZihLlCheDi].J;\c`*lEQMGJQ%T6`3YU_@lMme'M&W-'Er0"$F\%rNoV%?$<EDJ:KDaqFN4'cb7q+h$I)aXZl,Y56ZJNh!0*CqtQ1AZS^OZG@@WgG9>_=B3NF5lGl>RZ,_'BHi<_F,qWc-T6mc6H<a,-%:9IOaoi'P5_g?d_X*IUWeW2fTlG@oHeD5:ZWBBQS^LIti<m?i^XaW$Sj]V?SSX;Qbk.Q3nL1/[#3]M!Ub^9;!-<>)d+(,%g>'?J/%?9e,R8)<,^b?=T9WUJK\bfa/`qC1A<dSsMQoj0j7HV'R]l_e&#/$)=TjBb(D>Q(A,rLSK&X%-cAGX'DN&u"+3EenG(3'B5u&c\`8%LFL<V3(QU!$5Zj6TX$uu5LD=H@p"TbNM+"R1"j'^Z&4@q?Lrj?HKo$sUZ\C#)5+F7.,T2_J7YQdE-*1]?I.@g9K,8f<!MAMU?qSW%<sITf@<WCS;q">^Z1s8A\*[5JdUpW!B"Xt^A,>nCT*ZB!qBJ4PqG*H1Oh6ePU&NdPrm!U]E6oUB7NMnTm])a3"DbulGG[*5-V)F:%d-J&-4pHLDXQ8$41VKZ&J_\RGX&5G.(@ejkRC',GHf8<FQ!/k_%BkgaMpZGpL.pWF\SU"rDnCSn#8tEXM^pk&m8ihti-'LE%)0jP%M^.Z!UqDCT2<-9ILD=_^A-UeOU;!C'C)_FMDf<BWK5GSSIH!j">E4&kldbC+7;pha[iZ-grE,i<k+]?U]=t$)d_#6W0<-h)LX-oM%?o"'6de??$^Bp)eSZ5]NLkWqO_qg_0b&9,8Nc]%'>KA1_l1X5PPq]?h:VlB*9_PrRO^WoX8LnUsW+#/M"<LFSg;=9L,T>*b<m0P]%OsBbhBe;6q2\PY3Tflt@-QEKQXb*6t>*G^L,%SjaF70;'%:>`qrN+e?nl.R)_o9'Pmt]M2-LYa3E_/csW\a/s$dm_k0D+l,bO[R!%AdHF>N/AK7?`CZ+J\n0S0A!UK]))9WF6$]b9'?ospM&SU7Cu=KWD<XY'GDS[H?N>RNR6G-Rb/9q>M)`)'uu>c-K,\e%GPmY0.<@]%#/8qUnQ/i3\eKP:]%P[BSjM<.&:mSL?:W:Tg?VE9CT1PcS<dlM7C6gIO-g1"?(ZK%&3d$QL>2ltnA/1nj;rQa:c?u5pP9Bn;p>06%qLV5Ln@,iK^c$X`$6MqC,OU+%heu&MN%$En^)2]iX5HL/#gc$+3DiC,d+;o=hh-af;>/[72]3OO0h-M@,"1d_+bm.H!]BM@Whh!r%9U6:DSdD2EnN5'6gat!jNSbq+4&C&SNJ#R>$6\ZL,p8/mQ;$*X.!K@:]9-7+-hd2]E*URdbD%@iOEb4P+'Is?9(pC_5$Outf@m!)%J(!.3kjc3,ch3Y3m[fAJnaen!8N6C`=oNjAj@,gfGlIAam_;ZQ=l2Sk4e45jb?h:N5B*18QV3&nApJN-!r?r`=gSCIH<A1:Kt[ea%k\dh1Jh_J%YBVp,UJH@8PBboI<^<$@@a@X-WF?rS%$Kp=p%_K;7#c$r1urj4s-ib3d@!n(?)Eq_2(i[-U3d[;b*%mq6I/+WAH/N9%_[OC?H20m-i^O$Z_Uji#HKsIFqLLg"0SSU.fB2':>*5=6"1W8[VZ5e6oA:rY9t>5"1eOPJ9>^Kk.h_UjNmed(\/jmml<j=ZjS17u%_+Y"+#<b>@_'>]h*4.n;;>t**:Eo*k(g;?UpN@1U"e(cGg#EMOWeg4GR,ma0.Jl8(O2-1tA/O/P`b]=C*jCJ%e;4_nm6D%IJ0?:_%3Qm@gYL$I@XF">qloCHQFJI2T4p6,Tch8#^mmArKZ.9X<"lqkXBVL+3Lt#;D:3.m4\9+ST-Ph?,bT_'H6,ptt1/RfOB5c:O5Jq\t%q7]T@b_<JI(?<Jr>F)A7Z;l:!7W,*@T:WI+;0G/#]]0f0`%rppEZd$K7Et5s2WX*YSiPOUlH=;:?bfb!GC!i@XFsV<c))?<Q.=kT%\MGH)GXo_W]eefae^t/he'<UFFP`8d3SkNb[]lYod[8^UZ1(LJ%bgP'4'hsXc,Di<[o/1<AK=hQ%R+M:hC0hcjIf6Bc2R"7B0$OX%'/!e*LI'<DC!V`Y1h-nC+7TkpF#$;f*UVeChr`lJnQ!H"q#c88VVOPfM#Ag6W/`c#;u!fYaI]h"c,$gWMuik29f@D%0/e!Pq2=H1%$G$V7YQO&>0Bp972(%ogX:OVET/G?mo.u2P]=CKYMr'S1Q(t;T[9[J$JK/KE$3`^#?LfH,O`^*dp670Rc[tRoAeh;hiW@:V]uK.u%mTb54?'bQUc8ga@Q^d^CnS_f@]X[4`5.<[>emkfXn*R>j`ahKalB/f2g,F9m*G3,)YP@*qj9",0#9E>[*Z!V"[!*u!J@-4mIV`'D%'11o(1QWL^'W%.(1D^b#GmSTL&Q",(OVg8]`OWirU$iBP%`^7]QG,$2WD*Ahk[4UZgGZSC8^8K!.,Z[@"pHN')EHOgjtR''9Ium9%=E>0>CUacO>4g=F]ao2G.)5qo$QI9E-]-pHIUdKf@;a+$j8C9oLdh2<Bd,\)'-WbJd)cM+_48ut?0D43G&d!2]<Dd(N=U`2Zq6+s%S3s$,KhN<.dr>r>@G&rp"iG<&OV1Sdo.[faZZ5FI[<!fr9YuT\VoBc<jQU`2*n^X/-=1\PijY+JmSVFUSN\)/c0*<E1Y&S&R_rVO%+LUdt4\;fRa,;1DJZ160FG59:O\H\kDRN6<ESHsSQi,<FnG%SMn6]@Uh6Y5hc$Rm8d.\cPL8uX<Nh$r5D,hS'd.76eKdQ,4n/"=\%ct#u!-*<s:OP`)b/n:]Ic$48GcgX*VQ1IS$<G;MoDYUU"=Aom?1Mp@QGHA0"PlF9YBg[W[/Xm]V8`JUC3LjGucSWVVfXeQho(Go5%TCFHROfRQ)kZY`8\9&lGnBG/(cn.6`KTK2E_i"WN#XY'3EmsK'D8qBunD%pANqOKi1W:[k9=kb]#M/NnBA'Z:#3YWV,rUS3_eg6C%aR$6e]i>bQ[eY6m:s_"(]AmReGo&LjmnEnmGm1*[`<>]@9IKCd$m/T/_O:B<be_Be0f/,:9uVl&6cD+/;ke\$bC(%nhc:s$'oOTp%Xm)Kkp,%(\%\WD=UD)<7$>-1_UU)%a$S47U*j@U^N.?e:H[iX$ir^]>CHmSTE<hSJOqej&S7D<U]k)e9rEg@:H'A?lOp`X/fG.uQ%?&`8-fp2:+Y/IQ%lq1K1=(59#G")!8Zef\qer292ETEP'0,rqLA7@TK`+!DWkrs!GP(_"h/7F/2;c[O?@SXmr#Pd3bAKE*Vs-o'*%"`1Q8RK#g[_6'oQ0k>b\ifAcHpT\PGD8'5Nm^t2B$m+_/E1'4.X92n5N!9?1httl]']En4ct5-EO)[;nRIBgVO&*JYr8QlaQoI9*%4$.8$XfiN$aaoC+k5kSiKCg@sL^>+B4CpGkXIQ_Pc[6S!P;,9XK7F'\)`[>$fIlY@O9]QXF1ss\4=o60SLO2))ABL1BAWS5T&/GH%Ie')(STb#A6]'gD(#L*XYGfLR9]P53N5.6@7MKQUM]\U/f9-5)\EmmI,>AS6=V'Lk!ktP;Ie1c#U=B\/-@0>c,5B[@9p*tl4r`IN%=t7`+9E4`d+FLoV^4\P*Z5XV)'uToX')Yj($#\qh#2X%KK8-Wgr"X/h4^R$Tru%4I3JS0qg\f$Q(n,AkH/BkWLtqeH8XjFT%`+i'%+lpJ/9W.Bg:03IS!9H9`c$:hO3m9dNFRlDmp8;8iUOKO4rs5X=Of*o(p3DP=GNe`T%o;S<r.ZlflJMJT-:7c^90RoQ0I?X/aprl8%c^k4\5?Zr[7>$8Y$d[N:Li3%]@%sD5?'8,#JmBZrXD"T>8(mVp!bnASiQR`1.+c=j2,"*KBdE!MJ.i+@*'h-!BSGO@rPi2/.AC?.%j>hYr9'1Yq!EtDf>qu/@Or:q0>kTY!E#IRIUU?bNgBt#s`<cU1a_.0WV1#eX2[GlP[GoN"?V;4MRMUW9#%^B[Ma#nb/V\/J#Q`<t%nFUT47pg\g9\\hdkJ"=RDt^T6pj=R=S/Yi[?<\`RL-IiE(PooZ&naN-C_<&NT-?t#hsWN$r<:NK1FdXMKVL&foC#Ql,g`/PDaXWp%DAp#u66In[_&M3n0=UE,&Pf&@LW6G/P;*>!%^tK,k1nuaNDh6+mDX.lcT(X:O3K[^$6(b)MSZBc1?\Ro1Y0)6SE&_uKK4hL3u.nF%l^#q9]SDhjUm$p_-Z(e(1t-Y^hSOl4:37ld9W0*@%j&M4Ysllco?/oMqqS=_9#;VNMU`=^muMTRm@Z%*_bJjOCKPs<n^.s\@2DE6%4r&b,kp$D?G0ZFY_Y@j<&.BolkN"f.@b=J$/&_R:?4ndRoXp\PnT:^!Znj4[+Ch"j&JDJ.=7N+L]6FKa)p^pt#<D(#Y_PZi"M<@c%Q\07d+AOJql\K#YJ;BI!1Re?G96!E6/?HIZ6Xg^K<Al4.72ElpfVLiacc.Qn.Um7hU!qWZL.XG(b!ZrW?E;hu`.WV2S()cV/XiQL%1MZerD'9r>lV_E^3&>0npTC`53f]mka(GRqT%%jk$OCU"'VEWt5aO@>BqL[H-P*d?_Ed42B-F]8K9F#&CF?GpE*He"*47rV=@BS&%iN0kiQ>7=8W!"gZMYT8nU=LP^7FCtA_"OH"(UVrYU$ZB$ICR`2ejjctJ>Za7Q339:6&aHC'%Lh0b\4^o5b(2^)g?U?c</A)>C6VL%]eX;77)Ka@5bn]I\bK2oHSU$[lOb0oc@l@+PdG_?Q#[CMBGtFQQp.rL_gHtheHLTAmO]UlK9hg7%d\u(4m8\Ph(p"/CAp&$8:Vi5%UL<LoZ?-Zp0^_#K""[QM;KFf^"l:\Z<Z8UcrTWS/SoFB3)8L&f6?\S(3'NE.XdcUPYnCiIKD$4`a>()Iaa#E=#*#n/\>Z)"JZ&J5%D-9B9Ou/:(S)<"p[rg]]luUMl`1A:C)#q1oj7]=Af)/\X*93P_'(cA6Q;l3.`f8mL)l(TI:iQ:p.jr4-6[o[;)#bG[U8VD?`U*)g%.:]q+[pqLCPHF35Pf>*7c!?Q"1_I1d%tl/=]!\.uhjD+?pVjEjrXlnVL,[?O#Je*<2#Eq@LjWao(4[=bIhP.$At@lMnW,Z^n>P\C%>EF#)\0&ek]!]B6pp5_\%0D"__)B*\V\J$4%p(C!DZuY;?jBW!bV8>jg3AQ!!K$m'f-tB4pE5lI!e=W&Hu7n]mI]IaT"9B4Ou\DA%[N'l.oT@f9\u&Edan!\Cq8R2]khVNqo]'Q/?2p%s^$Kp,3-,qd&`C(>idTC(@J4%BqdC:-glJQMH&b@OKp7:-jiX?F"/?nuDZmN_%mLuGt/:+d!j9cgu"5GU-6<5#SnKt9"amL"Q4Ud5ZhRm6*P\ooh9/$bBi6.ICQ@1G?K>&FWU@T04fgP]jf@um_Cej#8o(BJi-(E@E%e%]F?>-^/JTNnccSc4\'/f]]NooWW-XS4RF$^.MgZcR$[GO"U<SogACg8iW45`oT8r+hX'&,/_;[F<1gSocbm/k:LREk!0QH7,;s%mkDeMG)!K9pk-HW/KHIfNMFI<l*bThc],W/KO=i$i@Sis*\]Q\cuH3:Ie[Sq79j1(o3:*j0F,`lK8o_U0Na<?X24W$<]!oaI2cp&%2E6HZ$>NgYo'l'/ZAI=fJC/^Wq5uNm?/L?YpsngR8ZYRB9&'sJY8OWs2t*O!9c(LJ/6hKb=ED.r.Q]83(t/)\(+mK&Q8ZG4\hpot%cNAgK=%F8MmoG4[jfuH99I*J(_oNa$Q0914.AZ^nkdZ^j_Aj>7qe_@h14,Q@ms(eE8oeb#(g-brpKe,kd\U?qPY4'7h9>VgY8OL?%P"td5FO<Gh=a8@o2RWaT\"j]slLA-557;fPWdM\tMC,D-1B_L*]p0)$d:Wn`>:PEjY:=5K8gB*#%@tfJY]<3R"=)&B*Wkls)j_Z!%/c^6p';T-uRC=5D'O5H.O]<<9U.MT-BqUWS%Sr##h8j#I1/9=uRWYBBVNREq9q[&jU6u9h"i8GZ0O(V5p/0$d=F(-JqaARU=ElF>%>(V0!E!m]mEgm\!Y7QRZ2rGu\#e?<8`3Mi/"U0?lqZ6i-6'2pu*_%LnlX$Ab*U"+k]MKBu5.kb?QNpn=]X0H;_c,7-9%0B^&Pk8C%^&"Hj>iBJ9$d8EtJ3P:Noo8ARVmEJ[9ZEOKD.Am":)VBS6YK,KK"uTkQYi7`L'i'801'+)5u\gs-`"'i.eMB_SCsZBIs=7rHY!9/%hq;_R\k0BZX&j9N9bg*VAup..o(,Fi_V#sZGZO(hKPY1n$lX69-7[iXd@^7o0D)QpD%o"8pOeFh%^8jD/3T"g-A,;0g5_^Sp6JEg%NDt!7M)]3g/-7])q-K/_Wu:9=[hMT0jt=>4d\aSV-Jn`Bi[I0kD7L4=H#X)gjD2KU3",\VRuq`1!9n>PVc_5-^7;7i^ko'rnB6N,%06+EM8p,XD(4,[2M.".E?gn.E3IS[JCTk!4)qGJ^3)I(P.BpF/UFo"Rjg$)L>bs4iV&?A)6%GeP^;qjC<X"_Q2!)#>D0UeK_lHnO%EAQVW/\kHtm&G)nq1P*7SJt9u%S\.k5$F>fO^^4(NL51i\:TL@gj"JND=0N#pI8dngqRhs"7@b'M>DWgJ,==<fO83l$-CWG(]!jl%,B/[f$(cXRNj@<m^:ZTB6=KC.9(r2r'OiNXJoPQY?.'qLPW(0^71Eq6Kae1\NNr@)*sQ2u>X"D62]Lb!cZC.%GUm"ZMgoSB`%Yb5%cfJg;c@AS`/2$8$n`?@/pZU%k)fMQD`0?:''qA2-T))jD9bU9rN.SjjR'0R0J^3!BR@"@FPP:WF@/Gkcj[ND2n8?""O/T+h:oGN$%qp,-KA-tIF;')>hPKkN&.sQ4XpW`Vl:&,]r`T\r+$B&!MU(o`Z/DD'G,^En/^S1T.gVrnQ#Q)?dY;!ZWh,b1/*/T/&gio&hL0XTu%6S?`23g*t806d4%Rd:bTI'ag80>/tRH5<,iR0b)QAjq(&?6ggTk-t>nSb[,Oj$8N4OAl0(d9[toN\G(8RWD6T'qK`#Qn'MQF+r%E%&$i@>NoSeNCuN5#*4LK;bpNHF\OPq99Q@sRE/ZQd\*.LcRo7C*N0'i/iR:il/@Q-uNn`BqJ`b+j?60lqj_5pgQ:,:7LUGDqK4QB]%E%=ZdIE7quM3(C5'1/N1i!"sroZ\[S3&&s:WM\TVKXlkNiBUa;jh.AsqM8ug;SlO8LVY>_MS&YJn@k"FLMSA0@^[c6<n\c_H>ar?%WcJu:FX?F>dj749E"(P+a)^$7XuYE*Xi0VjopV:sDkWHTVPM*PNu(=WL\,O'"V"V(d,m!L%$'M?$okc"BB8S_O>69A\4LU$aQ\+@%ej[O-`2P>q1N1K+#4tu1FH?@=4RM(e4Edd1CI1h?#%t*d2OIO=&#!PYA"7T1Ji.jl`msAM:C'7C8r\^rh[gf=_'MF)]uT=5I\!mN%2=@iX\`g,t9bMg)iU.34=1P_p/#F;6FAWUo90[($fY%Mj\M#+sS@B[!],,PAd`87`@EgB]q3OpX[%/VU/L?o$KGPMggV\aMH,D'%%p9bX2Z3@d4#YC&h@&AX!&8;'XlFqArZJrCb$19l[FfWHZbKcZ*"H6<9;&#0%QA$SgAN1A@q\D^2QM%/J]ebDN,5+i`9Yo?:rp8dM%auLXj,9p:Vo7VnDmk.E"9baZ'S'QJUhtt`4S7Et"J.E^_\!I$mRm4VgJ+BXAa7&#0l<WcF+q=M0afg+TH`$`5:,`KQ_1$R'qrl/Z%hK@Pj2^CmILh'Y6QB?OZ31[,9e`0W]8#kn*S]@\5O&T38098\52sP_ho6B^9l+d7bjUnK)7jYU!8$Lf3<rMkB2rZnl,6%&C/R;9I%i+Jq/cS4k\*5b2%M=&oriV_5eIe"Qk?W>T`3a]>A$\%n6;80O9="_8U<F8YXM5GoTn>A?`>[lcg4Q(iOig,k-J+:QDD"KZ!j);+i%It#>NWhf0]S1P7pF%a@TXWBpqgbc9I->ETWm-Wt#r56j0hrO@R?h@>4.q\,GjqBE3qqL"N5;O=daOT_+p>8&\rCAbjq43"aqs:Rj%Be`>omlm"-,nb8I+5Ha9]8f)Q`u!RUW9.Up7OQsN.K.2;EA7Bfec_<hh0ctE[5$,"TDDSa_uKAQ!e/pScL%A(T);R'lb@kRgN<,V%TB5gAg4+P$hs'V0iTDGXLAt>=b:BFF0OK,mZGc+A'(s9u]_]ghU;$T$?^,2qI-7>L>:tgrcX6\LC3ek&dlieW5(9>Xjc;XVqrtkc%dGK-.[sIf5+9/GAjHIo=IO)\AnYBK`/3<V\c"9-5`+IE[VgZtMRAL'p-04sq>Bf`jS'oj19"eq]T7;U=p6L#rlG;>lECS;>r8sF.%N;/[,r)Q$*?@IP9^4rE8m+=<kdC>e*L8F)R`>;jKb2n\&^"#OF_UCT,U?p%WVuF0HEfie?rgBBAec-IK23mft8m6U.U'a+?K%!3O%,)?b:l[JZd#=UY,jn4[!I*JU+5Pa-YDtO)'X'bg'WGK^QHN/u%'CU&_R@hsc<(kC"jh:AkEZ?.AD_CXCpskr(+S072S]_hQQ"TPK%XCj:!M;/!j..c>GeWjc3ro,g6T&K]Gjrn^hRS`-i^jUQt\)[A-[MNjg&ou"`a1_EnIo&.0WokRej:`g;bG"m`$VuQc/AbUK8u'%f%p5e"q8h;N[2d^sE2>-&V['\GD]\14e1^iok]f0$?K_\K7I7Jc#oC/ZEg89@G4HeS3Jlf2b-23l4rs]*nr0=,'`TEB=?D$N:rM<e:%?MYF]O;!t`f43fE"M7[ShEAf6pO:res7Jrd^t3;rTD]\^f$Pj;hShF!7I%@qo_S$JCjPjOmnUNig8r)ZY=c?tmeH]]rk4,?p\8D7%`'258qrMbQH+eKY5J%L`o0i?2K/[/nAgTaGT0bX$m/M0k?i%bUks8N9l^_s^5Bt)4&S*No6Dt)qkC&lq*`!f(O8@l%c[GB\RkJo&%rF0*ec!l+7=gUELeW5"?(f^?=j*gi2^.7qU2s&"jH62eP4^P3C5PN^S/[Z_6O'oMdpT\.bID,)(Rs!EfV!n8Z^]2<k2OA%'0E7,?%b79Mk5CM$HC)cO^?`SBXI:J+RMZnB%IhbdD]/ZjPdX(`2gE427A(-cWTE!A5jk7EHkS:KZm9]VJ>MVgLh#0jHdaZS;([ncNqPs?*%02B8qds^VdW7O6u"+'@+r2/XMd,/0Df*;*L56qG_Kr1PT0a9OF,nIgR)4oP9nm7YgnFj1`%=J-kDs_A(a"8BIY2FbU5!$!-s3=ES%BX6OSUG%]*P:p"8++8FiT6ud5f^Y^iO8G+onmZb>kf`#cjGVlX%Ng+Egn/u)](9c'dILR,q=6+%,4cg>q%BLIr6^kOrQ1BVNP:A/%o96RQ?Ta#1pW6T_jdY*#r+(4ua&m08mE,3_s7=[h$gh-lAh!I]rUe"O=hD7dV]kLmq!tIM97cX4b7?f9jO8JEs6[Yc=6808Vec;W%s*%eQ9>=a+j4O>J"hjZHeW[1cnDMb#fB'!tH_4X#\c:I@cbFkhPKT;bI.lh%TE"<TH%Fh!qqc8KI-(5#CFabHQ$qWfaYoUUIOj7R%kp[duh/=ONJ(7i^D?'Li?a'HLp%2=&"L#2IIXTc&ber)8bB<]CpA]8&qi>IV)^rcgFgM!E.J#C?nfK:?s7+tC=.R[4[JdT.a"Q1s%r'uD=H9GNJIJq39mB/[<DVr")@s>73_f.c?o?CI*l\>p!2rcTo$C-(QY%)r[qkZ,W\s^aq2l,=&Wto^9d]*a8rA79[e0lO[;FBKh%@L]`j\uBGPl"2JMD7OB2la7j.qq$S(2pL#IaOlcIZ7K=A&.?`<VQjpS*JRm_8bs66R7FG=N3tL@hUHi#14:[T^ga^kS$aot:7DgW%2Vq,[p,:]bX-_8f$F4>4K?\9"`g]_\fTO`]#LH)t+BpKaXT'2-WfOF*(f@0c9XBbX2-mVXEmo-'fGLIDb>lCpX`f%kLD:O7O@Vr3%E1;".$o>T,^&"[AbU_D,01EPl>[_rBZTq4d]kWM0]W\#DN3./)eVYY_.4uHA)BdS]h*bt%>CA$PoKa$qZ8NCq+sLl,-<,&b1\nGd%<$gjg[aBDiTSTa]!u-5NZdjdTbHeYUMQQ&8*Gb639.j/9p<-0KIofS<`F`i4o=_Hd%%VS'&no2Uh*[h`E4JS;mq%AN9:*Yefu`Q#%'VWVA7'<_!4oO-40T.id(-uK%rk-cGLUF+\2'[g!J#:*_IeC=R:TscfC;#)eWU';-f1b&]Z#smp2ri[nWjrOZ]if"(T%&-Q)_LfQ%B38.3BKPV4r7#RaU&CCW]j$`k)ckq&)ZDe*XZ*GiBqH5!)/_5c9huI%gJk)Jfkj0@Z(B\;=SmPWd\g[sLPuPF=A-A9Fdd6g[MuVk%;p&g:&b_*LZ#%LkBQ&eJY_IBaDY9j_MV_CCQ4;5]b80Se'B)Lo:g7E]dE-W$O%8T9G&=LiV3E.HE5J3TBhcL.bVE3DRH:kf)b="P%P'PL8bM"U-PZH@P8Ai#9#LH/")OdXu?5p-$eqDCP!KtF+A$I1O!Gi?<FLN"Xj[B#'ghjRmljMj.HP3sFXi]?VADqQGoHG5ld0m"q%;H#F?/^5WeA9SqK>I?YZ8*<;;'gPu[Q.6l?Y1Z:sD02$/2F\@')^D4S%X"]*`n[?5J4b`\Y"$%Qg1gsA"1%Gr#e\?1KObD^:n%e4%jgsehFZG=Tc-fIdB!emmC3#oTk%`bAX6K-:%qr-.0hu";pDtg(o2-:*c@`Z<PY;1l"Jn&dV6C%BA_P6gGUk8W\OVK'4Yp(IEh@Js%7;7R(;1e#g"HXlG:`m)kpn$W188%EBiO@&!/&Wcs6#XC[R@-,cZ/%,4<,+817$,]K3Ps<^:0"Q6,FjBu$.[8Eak='JRG`!@Jc"M?%>:"jei,"3!K=7N^gCU!uE9#3ih=E5NT[#$H=JHIDjRs6R9K!YQN&#7VPgRY+G+[U&K&\Gj9)+ODl:\t#"ul$-S`@l,3n$3ZW/7Un%/;eA`N+b:RD1\NpL3]Ys%)Y1D38%`-gUMB"E<`n_m4M)+eo:n(fi"dU.QZl;<;R7pS5BIeB+E0&jUf3jde1U]__4L+qqEVNLRMD1%1,m\k2;E*+bK5M$!HbWtc!&@RCUJ:>kH-\N1LBY`C9<d3X5r]p_nabt?Z]+;JW:LEI_c4n35X3N7bG,%;8;KhZsp1m^'OqCd,'Fu%ET^JPI0-/g4KmD+#A>oTrELemP>uQfDS>+Bg'D_e[ZXkgIt!A"+.)mpZa[h5Qo!;_fuDAJlC9nYS$>R:lCMFcqb\ctcno4rr@3B9%:%hX+8mo,c:$X4h4>'NSbNY26IN=Y?CXRMBm%/$3];\K4N3sOSVEg&SKf:9S\X8u(4p3c?4iJo$eSM0Q:Xl$s@V/=E;Ue)/7YXpV%7l/M4P\td]A?[MD*4eL/\[YgU=B[:T_R$X--![@LKL=@(]okUdeudF#cQCH$%,Dc7](u[fgiVXU:I5Wequ$L3RSGE_]Xb$Oh#b?Y%V:lQWSlkWYZqHY>_Ic"7"e+ZkMq!O1/=)9p*G5/G]?)Sh'O252o0rkVe#oE9#U40nnr$UbBJbuaDkbT"6fW\rn#]QECW)2"HtItt%o>B7>H5'Z)"g5/sM]hGDoCUJM[Loa.S9g+DPJ^@qjt4n;CoK=cnO[$05qdbZ3BJi'+p0`4_CBkA6ZSUF^A?B_&")"&\QT\<!7_:9%LIOU15H5K=`:S[`BeQm$_e1heWd]'SDV[[^<nqAHW^@H1%F7fe5t9XAWf8]"C0hUZ1&I5KMth#i<c69mX$[\tYF&Jbf&K(VgCRAb%N$@I*W^e-nga8CqY88!WS,D>t.(TCaTC7l29f?3K\u^%5Ru+:267oA9U*ggN45.-PL*!^3MR[-2C3`ec&Im+K'$XO`1!Seqh=6e3%Fb=U"06pukH8G[eKtS54S62XB]5&gn.e^b1Y+8r`FDJ^Pf#PC1)i)3j%iqKE;qMOtBaSFGXn1)iCQ.]K&R&A3gg``]7\>eFUFpV&%A.1ikqDZA[b_RUj.bbPI7Wi</(rSdKC#30*Ktbk/a#pkS)aie&h:0#lL1?`1DA?*TCMSOgZBq#rMX8<(3>%efoh;$)N],_HS>0YB%Ng@pM.YW(rIdbQeo,lsU1?oFi)]S`"VLp-:*lY'FMcsb\<QmX35IdNtB9u_FcpKGeR.d/MOC-`O;_Nu&<Ds/\$@88nIX89s)H5,n%\brR2Hp/a^l[`nbgl_gh)3A$m73Ga1XPT$8B`_6o5hNCkeoKe\OW'/"PMlj7\k/r%RU83t8%V3Jau@*@=3TB0^o%m.?('?&^4*$F%\!W.]2>mY.30@X2"`_q7HSQs%1F(U(R-eet:tB6Kb*[RQ^A+EJO/f=/^F<[;>1^HC<+n`S<s]97oq4H)Uhs5?B`^VF1+j@f(;(g)%:p*,?dTT7@.d=IR<Z=JkZ+KY/SaF*\(?oPcG[8%\Ji\I^Qn6c)"^is7:X[g3`G/RE771ao@+(;@#d]pk,7^Wh21bOJ.!'t[(TOYs%JJ'!aj)#Jllm!!5F[d?O!8f_@rZdYh:sV$M<7r8RSVSmgWMp1eMUF%hg"o-nc/h:kbU0Y9rqle8,.0pS-B)1M/6J:i\R>b,\YdoS%?mFZ,P5u%XZ[PJF/3SO+hu8ME\j$Hg*BR2NJ93$mD@om,!6cK5:ij_,g>TrHMR<IpnY^^UN<^fd=(hS@f<q(hZ'N6#AaL(Z*W7F1%W$T.DlWD:fhDs(tG31*&S"f'2Q4>$f7qcW'QO&H-:=Lp/J$o507iY[6E!%;CCgG:7phUmn1==).UEL[Lm;^rq?1C4+1,1VAO7[=-%(<ikk+mp/"X=LdP)@V/AN7*T__/@d5+lTYC200e><!bI;g8P91dd>3+K:X6iJ1@bQF[5\I!.?7f`jS>$]E<*tW!kg*W('(kg9,6`%`W_sF/;:&mEH*SHB!F.f+UgLEW4$(;MegKUeQ`aY+_!$*O1f*LRLoPdd+a4.G5eQmcjYMZl.BN5f'C<K:[072AZ&B;?tc*4+?YJt%N^hA_1ofWh\?$R#N]a&f+Kipb+P,#Pf&3gC]EZ_doTTp;U&@k,&"3-#C-anFX]FiZ"@+KI\"B!#S'%Kj'WG$#q(NqEhc559+pZa?%G>d%oIQmVI/=#Z4'gT1kon`OX?u$Pm(@.t.M7ALF%%Zi'Wj@([ZVjG2BS%6)Q`FqF<_!;?3n)'f*.Q#A10.8n?;stn(p6Z%.Z^*D%H2hu*fp:!)pkEW`DHf0U?U#Jj/:/1%BIO8o:RuCfAGd%=#T;+MfSa$`LSHJhn'H!$LV!.!lIK,%%tFS?^;GP!mUCA<TjgFlg;F-A%pbG"Bg6?4=,1+OO!T:p-^P9tm]L5_r!>?@m]oIid,??"E7&9L\b;KB`eIP"i)?G'F@Z:B_!TG%kWd0=NAdVO)[K7KVfH@/*F!%9Q%49CFlYj)8;*AVI.o[n$XZX;:H2Ypsf"+">F-#XR2S!UA!K(o\j68nEm:M(#SUt"(h-e-@,/sF?I/HR.HYX'n=.b7QK`L+DYS0k#f%bJ41_8U!Yu7$l7/djJ&(P0.VVo5^S,@?cgfCcen>iul8%_,:3U>H\P65JLeX52Nb?1,d0"m]kGq9]^,Y*Zi/Z'tS3%f#6YRP.A5&%$=)G$$"RB,:[DsGo8\aBJ-VKd>j\m(A<O9uNAIhb"_/uC>UFkX?\?Tb.*JVX4`^spiMNAjMM!%0e\`WtU_apgVt50;CQ5L5k7qO4%QCQ;`9KI<tM`lnmr[L]1Y96#\)J(D<fjgO'"cC)PRPRG4Y)ZH7:7U0,BP^R"1O.6M2LV-4B(2C$Xs40TYH6IYm;ZI9@'/-$]O%`e%H+f]t`H<h+ES]9q!;T[c\0)N)X%0-$ldjhdT+G.oH+HbhhI5]npC;B8\AefuV&AAYj]Vn8n$o$5>YN0U=oa")OA,/';IK:.Q;iiq%j4fY1o)m%BNCk,qH*i_2Xs-aP8M"4SKu*Ymq8l6397-J?:1UpZqBeeg_^W^3:oqU1c,rL,.i.EA@8ZbDfY$,kar8DdbqrG*0tJl,%;l(KYD_G6DdSutUBW;nEcr=6(.\TO8*G;h_,c\;XgTDf!'c&A7<CagEOb9ZS[$HN$PmaZP1J+mPaMJPPX(Ej^^1u:-n5[AtE*\XW%!Fn!PElokK)C_`8+8-j+X"l/3:U!]o*\0Z)p*$]gbu&F\`s)/0Eke.._L]%^XV+d)Zm?u8db_oWKN03"1eLKi]!hepC"c!dS8tfa%O;e!NOM\=J0N]X07'"9*P#^M?BU(Ptg7-^u@?n>0;$ng"/Ia=^[S:TCJQ5/c@j",rNLWP&2R+=7KU-)Dp@>hcaE5=1h-22X$^/P"%^ZB$uW9dP&<=hU0#,KbFPp03b8qAM8Pp0@1<m'e`fqN>[9JU.:MG9=4#Ei+;YWh@Fn8:qk^_b8Y+o%e*TAYW^%YHF'24^cZV491g%Lrg!O;>$-!+6SH$VOH71_PeTk/g(=T%E&*/0:Y/cO[u6FdrmoGUH0kf,NgMg$"uPJUM?K=X[%E4'r+HdXeSRbPZ(*&=0''T"4i1;%:r69O9ns'f34QAel%R[Oce5'SBAGEjL5OAWmE^TsPj+sMOee&d7Zos(CaA8?4<$j6jf''-*bQ^!01pdZg01f<9b-FO6H^@sfNWF`%#h>;MOcCJ9auiSgLeK'/$NnLl^Wk-PmJahim.hlk1p"O5>*,G6o0;b%`N#o.912L^gU"FB,\eZ-L.':F;4IIt85)bC>[hGcYV*Rj%5Of@%Xql;NB364uI_J=TAupZ2H_`9OB.UsC<(LDb$9;-r;>1K/h=1.13He-rnO(8"%02A/2&*u\#bi&t,>+79c+smQ$bo/PW(lgi%W$)Q4U!O0!XO1SGeo]:6h.g_37=PQ!RVN=?.V<#kZ'M7NlLj!UCpbBDEh$-]=G1CgYUkB/BLA:ll`^'99Xp#a1;\>b%%BXg(ImL?%iL2=$%5rgkekYMP[+sJ<$R%>"EV_;MF_UjT'SrlhY6%?WMc<nYX"Wu]%E_4kDY;W'fVa=h*GMP5V'`\-%InRt41'['AmZ?[ceFD<%DG=2#R&8!-pPR=i3ko9\_1:&jW3$7G<KJ95i9M#I^I6b[IV(uZX_+3!g,gUJg+#ecPuM6mO(D:**p%[elA]Bj2i.3p0]*jApBEht%8Um#Sf@F%XQN[5>ctrIi)D$$E`f3jhQM&j<DbWD7Z-+KU$2\WM?"c"Df#Irj+OcJ,1&;0=7jT<3CE5>_6$,"0jY4:6_%O;]gDFV5%''?X^p;DF,^7AAlHkH_RbAVJYm%8<7iD9=\S)'FM.7q6W3_P_m\[d&:H-0<Zm'K\Pio$E=q[.q/B.hbA8?MO.e]n<FG$N9q)"i$[%gPA?)PVUEdAbC?Wn!#Wo3EBuU.AHQM`4H02%2)hoA$?oqLtNKtLCi*RF&CMe+<K,GbhJTB*c`"Vb%(<Z`>rfH,ptcL0],S4D?6nW%+c!:(8uP-@0?*hX@V:$A-=m>4KqiVoFk9iIUQKo6a+Z6^ghPNgk'ICMpMX=@&9lY\n%IS.4!Af$Yn#e6>RofRRW-X"bDFLKqf9QU%Hbq@kP\!I?]ZOd@(<gh0S$YF)/-QOM"DnXJ9qdi:m0N+E0[Cp'Ioq]G3a_4*.kB0UrJgfbGR8OBn&$l#=J3$*k;[ri`5bMZV4o8K%QYuYPk/=2flmI`SO<j3J78h.-%Z[b0HhgrBA88KqUSOG[1kb1r>;?j6JS"7Z19FFJ$tJ+SNo\7M*WleBPZ5\ECk1D9qIA/$Va'I3%Cij'lS`]5FrZbq@j?N4<7fm54&X!/4V47TYB.GrOka`DY]agLIEu$#SiFG7>FV(#D"@e5ZRAgB<;-a$AO'm!Zq5#??'(rTUj=ab0%8'-I\-Befd-a4cP6B3iGM8=n!4G+$`1Q>Y\FRhF.1<N_*ehq`6@]oW"#V7h"TM,SCA.&<t$lS@@1*dTlAB5J_+;lr"lCeL6bo55r%g7K<iYT`hT'N@SZLT3ua87sMc66mO$&gAVoUoH[LAAjX9bn4h#:*bf68Wh,j3@cl-J/67MS/3(%^!LbPpIK[BGV:431PtePG(ksg%Ha&jkj[>CRMW?#!HU3rhL5#iLUdHCMMGgKs8O+9oC(^rnFJP(N#WFItLa"0'77=#57O52ZNopVQNWO3Y5U%C>Bo.W_H3biA6Xo+#%df(LQ@U'k_>.?n]OJisI=##e7e,\4$atAoJ:?'94Y.H&U;YQ=\?6\1e(VAVh+M:0IU71tqOU,%",LXmeb\9/[R>K^k_'>.$GFJtT%,&M5W-;%"ir<m4>h(XGMQnRb[6P#9AS/?DPjMYkOC4<Ot;C.p#c"_d"W:%1A)>lldqud*1U"4nhTgK^Pe\clIUpq/<%!*WB!M6$W%:T>EYpO[?8R>QU,"IFA5[g4Xc<e;H-6JC%EG>N5nj6?]K@LA0ZX!i>A7l;LoetKhbj6Z9B(2Us0L$jMM3'*mOK2?3;/UL4PAW;Yf%L@DQXkS$]M\SlIYXq?!?6+Y(2r!]]:4e$FcO7XH/!-jE2pXG(aqDZ]n$,bnF5Eclqg(!U^=O=bK]q!a8"*mc*+o7b_M[9.`I8RWo%==Eo"f;t6$LBWtQC*rKgI@`U=cB'q5N0n<u(di&r0LcU:3/g^L8M0>j)#[=$H!Md`OWtA^k*Ig["gF+%rl9KI8gV[CTk0b@Z,\nM%>t`lTmbWN?a:jM[7Ku3$BB4M6Hq(qaBGXm^PmY'WO)WI"%AbdnaS)\?dq\M?AL7fe$c4$7)_qW(-@dj2@Mq`T*#I6p":fFhag=>r%\cbTd=7\[XSlN_+!C?aYVk%9*qPUo;R*RkCpi%tF@&^:B"jaG1(=kXb6o2kh^K@CA&B6o',1)*$JfI,0a5@M`[/u2(S8%:\+sd%9%U]U6+=bK$qM_LK</XRYBYQti.b;;OjRPKjV[#@\EUkr<(]q"<UO[g8B]m6%jRAWTk\D)IPZXFc%%@UT@/G:/B4Wp/i(SsCGMj?WW%PCUHSJ2ZSW>KK9=VF8Rj$gCVLL_uCpo?g:K=NX#S<tSU)T]t]PAO\gE$%%_Z#>MBFZdlr,>Mn30,;MthY&L_6Z5NDM[2q.f\Re@#%9[dcYZ!u_r9hurE<j+u\*odAt01t1P<a%/!8i/[KVmN"/HHg`^HC9q?L,F7U/2AO?'QY9Tde%j6mFcl9;m9ga;kiMb/VBpe=1?2l%Gq#m8>67MpqAUjuDlZ5S&F^UdR6CX#M\tjC3n*^H`$%SqBR46M&_M(QRL-(u9s8!^3pp4Hdu^HI6,q844O?PHGepL.IFARm?C>U^%RAO'HD.1P^4:1u=Xs1.iP%f6J$D$p(o96jq/a_YD3K`QlVAGEPdIa)6RAQ=8NEB44e31^DmKlUkpcD<Ll*X!&`s#1uG)-9tA?ADO%Mc-54@5pR%C]15c1/4r\Ad(`SCP_@Mde$qp1/1QO9<A1#GRa2*'+$0ZXS:>UT]q:a$is'U=TQtCBIcX&UHRSI,ca;$?BbLc%lQ"Q%H@=+f8=H-g6Z"tP_!=(`'Tf[4".S-CPGZr4Da8eV\R/*RiCMEj<f,lng(G%JBQ%?;_CC]7(8[mAh-0qt0'sjGlaYP;^uKkh,-0[8%7:<>lCl)2Lr?\M_;:-k5jKpkN$c4B5'quCCW_=7BNOGh2+P2n31c5P`0leI0g;I%U&mC0Xg<8r*,1A,<DeG=F1qbZ4mE@CMfr[$0%+K08h86nh<77pXG6>2$&7@IP&-T'<EA>N6\,iFs@cI7Hb8eL)47[bAo3n!ZKGt=AFooh3ql7cpu8^k3W;$o-C#m[N48CQmiR:>1Z%9s7uXg6jsH;nalW>kQ5?Z$IO38K_;TCSp@hc;4e8?LPOnT]o%lg9mP0]k4TuXV_t0'r+HdXeSRb'PMgPX*).r"4i1;:r69O9SZ78%.V<Nhdt=!TBmT?qTt?$^4:+T[p'7m*9:;YI)bHJ>D'WhAa[VGja0Umb4e?tnlZ"h'oqE.6H4@.89q%ZDK,>uqA[/`,fFb,<6.7?5%fuu99m"e?a'>"LkF2(Grd-^hHSF$%r9eWTa3DC%IJ#;Iq`U$j,l,bA[c#"Uu0=`j6l",h-jJP8?ks=Jf9eTurbDHrdYiKP]P';ZB%Z0^Y#V!5ijltC^a8RRs`#;"?r8g+smcS3p5U$9BXc8<5o=9"rXM,mSGN3_"GllaaKW(j)P5nAUl,`f$=9nT=pf"?h<#$":PDj<UV%R\"b;W!Ab4Cj"+sE)m-::Mu_8+bHR=p<NL:!O##`5UrjZ_?T0sOf$_@*`O7VYBPFpVWft^66`5iotF(NVUrj@,>Bg`JYq&Z1aGf!%[1004RU-Ld6;!T'>\tEoHKbo68tN]BNs.?ka/W?Bde*CPXZ's?%DdlpRU3nU<g0E4O3inEechX0BmRRHVC*r)j-")%d\$>-6.;#p%M0C!D]Jf<e>"-C,9,L&gh%LQUI_h7*4ZP66NJ")u5Co7t?\1,JFCQRj:\<OT".EQN,Bc,1VMEo>VWj?PV'+5Rm/Tj6GuUU(nKp\n%?D/?(dt8sh1qg+t$$0<jHX]4"1qg+E>FHUhF?NEWT_\4B<s8+VQ:J95g=20a8r5cU0,e;dj-+g!ZbW5q!6p_0BIVc^r-V4@O-<'u%]r)Q(@7?ik!Jh&H<$UpAY_osF_MSW)DL0h$$/1nbN#c#,IB;$<f'goCZdmloM.#*pR0ZnA';b,kmMX$U-Y/r2irY.&1PeDr=HCok%a@'9UOGRMqHO'J,<5):&-:25sa@,MgK1lu.CQOBT$=k=fPOo.Q*b6J*[+i:sR0ZlJ+;7>Mk26IJ8=W`8_s%89G-hCh$d8fRf-slQ%ZQF`@'?SpEEJkqQi?fLSU,&03%5O'u$.K'F#kABZ&\Qa='8<Ut1/X:@B!#h]LEuNV7seX;Ba831P)81U)It%p439leW#ubm'eRKp%;$phXBh;BjA0RGBDfq5"&-NN4:g*bT$=pE-178F1T4B.VbBA=GfoY45lY;GQEKH#bqL_HULB5Ia;$LPT[c:nm#XX3),7"l<+Trr$%Ou*ghSFEmi3a]p[gb't[gldN>K+RQtSI>tL6qN/)-5*.Ul&n_>gjoef;*:HRR0\RN&:b,E\H5oI7#6[\g@;\h9FcW`70kX\0)V,2%6p2f`#T*4X'>aZY1(g']Xqi"j+;;lYhGoLF_IDtM<+U:4%l.!?SEoV%-)`_1JjC^jpG3l5&Hi@pO_B+)8-DrJKd3!V>^Y9l+;815%#/rrgJD4=lM-tB\R7JT3],tRX^:7SsR4)>i@YPrD#r3+[#g#KVg=6&-A>R^!J6<>EM<*I_3Km-in8pe/,9W54/p&LMqg'8nRZPgs%!6IXAOHE49<d1_rpP*q>.*+f1hXM3hMWOo$kYP;dm7=u?.s,HbH7kW]&B"l1;->S&OGW&BZi33:_O6h66j6fsdY(6(F#c"0c6dA*%Bn^a`OGV*sVZd/Z"&:5V^rIV/7Y$!oko*?Q'=97Sfe-"FM[O>$a@((6WYHlnVi7;U_r_7\PDKj$$8PI\d(Sh[SCljHR7QB^qOP_r%#YbJj86-fJWdnZO[*n+k_6RMDLc=&b4F74O+Dm9u0[h-XL"&@7MGRZAM5&L_>2%(Qq?q/3E6AJ\La*EUk*Ig["XJTDZ(JO(ag-3]%$n$/`Ym"Ic'"\/3*Q^]\$-O?ZpsJboAS>*=I(ItUO0_4/@9oi`GPDFK?.b<s6:9&?7)d%mR7m`7a@,Z;81)KJ!&B\,lZt=K9N3@k%6\IC;_oZF5KSG-1;\5&tAEI#`9Pu/*k)cBZMD6rUlCMEJmnE"4#\AXb\f_KR@VIBpH\.)dp:GdY:-g4aI5XMR!bVYX7'M_<-44Ml%-`[Z_oct1c"Q)NqK3`VO9EZW)M/k&sJcW.ZR7M-BCuLg>ao__k'8;bB]fg)h<aRL-3d`1dKm')OM'UM5fY<VD,ju/Q!$i3a6Lp%_%\->JJ';\T%-;#jMR7R4=m?>UZqH>"n,#(U7*]1HmOG-IVJZVel55s(D-]%QHPK(XS+VL260TEl29I0'0'uU_X?X6:N6(CUo0*4oJ%E&*Qi&Qh\$-5$GW,p:/4[b*R19I,FTTLP=aj6SKqQLY8*5u]F,*0P;VgPJV"Y8L4k&Vj+9H!:tcgh(so_d#\AA0P;NBTJ@6A4.Z@%BG1r?D7JG-h27J-.BXUoE\`b",gD9]X$\>6$&KEkVGBUGTY;$0T.(tP8DhNCJf12Mkb3,$p;2X:/$s2I(=`-OaH34NQVFFlHXU73%&nE3N&#!p'M$290-col<Xs2l?nT;lN>>`Ok(YoJMdU%Bh':EaZ6qPg21(b6OObpBL&Q?Xe2F!FQMFH>GR7Q5G/_W`NOkLZ.Pop`o%*<M3E>:Yel;CNt,;>3X/&k"%1a@%cfZN;6_$"@BLR>;V1Obj2s.fc$"b-=!%aH<]I`0S[Y%$HHh(Du-4hJ<?\-43rX1/Z[;Y"Q&]%+;:SL:*u]0,FM(6lpHkkA.62D"napX'Tf[4".S-CK1r)AL]4`&^RXN)JP;<1&h#MD90f6YHP<Fl<XG"\<,+bcCrsd^Go)#5'RL9G%U"GEW/3GEaK2lARZqB[<=XB)c<f&'!]np#+<f*jgV1tr3j2?7UD0?8JNiJ`"(V\>=M'QdK>G4]'.9:1:^WVI-2e8Yr<SEXnPjor7%-Sgh0%s3\OCRIJma=@GR8Lh\T>%+6m-IS0"3t*m,Z=$WeTF&_43>$p8XAiSCe2*_T-QU8rq)eeJ..e0`U<m>1M6a""'r$qVM$,P9%JP;kg'$*^@-IOW924rkrp2udBP'92uEghhmlII=<OgO3QOu[,aBB2aIY,CuG9V`HHedA$NV%ob!PHCTRUQgt!"S#L-\IBW6ObqR$%1`\'f=0Ybu(Y2$):+"CLl`L7_8>L(U+,HPBM+eUAEouTr)[S8s[ZM[G`RtMP;4Ms+lZ"h'oqKq=D&dqIK1mPE4,e5M4moF4G!m?D%qW=+[p+mFo,4:7T-IRnsH%&)_LPB^@pZ5r3+36jl)OutIGlBqOfGk$c!`.,;.#CW^rFV.J2Aj+m56V[fLcUmD6lW38^Xc2n^lk`%%im9-?a0M?+JP;;/@S8%G>NF:R&;Q(tAulQ%\n;lG*m$hBNt[pP'iO]9A0TQ]`=_"O'6b#/7%m<t'2]93\Ic=2eH08*_+5Sej[0Fp%A0U]n:_-VqfP6S+GZKr#U^CZKJn-(uj?Q&;fnd>jn4,q\$-BI;5mrd26o?P!!&B\<\uo<_'<)V-+G3Qm*+U6;M+j.+H!ji\;Ls?l%,RCJ8a@%d5>?DG4FQC#l+;<iu1l+NabrQ.aYj0dRA0ThnqB$gn8Ui^^5pk#7k^S+V,fgC"n9#&`+(QR),SLLDF<;kDBn,7qO\@$q%ZG7#b6@r0MPp8HggL*2.?p6gEf0C\2',/;>A0'#m#gJ)W!A[Nd0s5Ug(@8.0bY`1<OGS3$9k5G*j+C"OA3*XN7Z8HP.ZfMH-3Z.:%moq%Nd1R`\;6jC4F'EX2@Qt?5U1@E8A>72[#*f+X^SsfJ_f,S%o&qa+_CKfQ_]OE)jl*C.ddln:<B$4V2+g\I*r1db]t_tci!3&a%jXCAB6ZPDKO.;N6+X:ldYWVKY0\gc_^OdC;/5J`CGliW[_3`6[o#URKC]n0ln?]1;nuN\+CQ8<WVVS=eH"?Sa'r$p+Z"SFTf155j%3QA3=r+6,UUH`s;V(-Z;J9@RI;6lM<UZG'L%0DlWWe.fB5rQ)4,a$LFOOBD1b(=aR_@eD%5F1kY=s_@ui[tq2#J]OAQ:HE!F7M=m%BU'fNGr"MJETg_2Si-.oCV2tH4S>Z+/*bC3>I6N([jI.Dptcp/k6--6Ic(Y3O1I#5SAe,eVDGVi^^.q>AHs=?9Nii_]j0M>i^9q4%p^1?94Fto&*:68qrn?57Cl*6j08W4ilo&@4RAIK-)!`6"FNM9*/A+H8k0C45c]ggY7`I`i'>U6PKjgeS.S*gek[@G\6os2E8>Jn&%2A58KPS<:pPXl6mmj-=q^rfthS4L\915U+I]HE5crh^K51N#sMdgKC5,.tQ9C^.!W/^8Zi1*W8qF=_#o+s!F<,grZh)R?*]J63nM%FHe/0FM,GP8=/ai:8CNoXP!nuHV0aUYU4U(`*rfgPj(H/9Apa$l!iI7Un^8=8=.1,,grMe4VT'%Y*DPUrV;`_OcBr;Ur]N,ErI0m%J'1JQ\hHBEUsf;H*]7"AYjeOP#RHP`8)lr\>rG2BUe>8[L^NMdOY-gq6H9[g,=RUn\:c-P,dp1s'ftb9R<uJM:1UmYdQJcS8)cur%1a(4X*<M?ubqDV(lfd:2;X5)&j]oA>da=SJr2*rW;!VXt?pk'#Bs`^o;_m>hV%cPnTEg<qTnac=0ka!"*UQWHdY3%eeUjhf,+TWI%=##d[e8U"%[1.;A8@L=DlgE/_1p^_EQO&D`!<PiG!AG/NeD*i[6pT.jLd$O\R%CVSi>%.Rd^flj$\?,Lq4Y,_!-&3cA]2Kao*L]g%?k+o(4u>=,@DrX`7mNlneu#<W<A.?=aqL^r%"*@DMaTTic&dCk@-@fg%V9H\YA'rY1a/&eJ]]?.>R<Zkdid'%`%R>O]HU`U,+W*o%_'L/O4k4/$cm14[TH8qY=eQ5n0FqpS5(H3KSR=W2HuF@DC<qQQc9[S%OE$$C3CQ[SkHkeg6>).7HVHkPPXIQlI,hSAE,l4NP`lc8%+>GT1Q:S$'2@h8flB1AM1*^Uc'C"$7)-*Jch4l;*S*0N6UgrnZ7(QnppU9g:@ZM$f3fuq;1r4hgbm6]u?%#g'qO'o*I1Eb(F8*nS%Z/@?_%RM.kFIXe:F@g4_"EEDTJOl,"/^`!QNer9VD'ne$M8sd8!)!U[QSIA$Y`TQka+!#?--PGe?_#KJa-cM-`%HRe#9k0a0G<Ue%0HcL<q^E-A"RDaehYON&lt.?uTF2\_?.+g5,+X$3QD$_k*AJ2k_RBQ.DPIM%H,8iX!g-58W-CH9i(e9hVI6W,f^ZC6P=CiLS5mMG%]).ltK%;s%Y^EHtL5j9=-_ZNdp^NPS3be"%94MDd'5[B`h%"La1.Cu]pXp7S31LR'da:7A8=-F.KI$5A[N7gt[5!oqKJtlSVA&3M%,U2'Ae:MY4bAP;2fatT29cCF"RihAu>"5Ydd_r9%?;>V;5bq',XkNfAX1%QrLH!t&[2jGHaoBFP_q%l&rC<.Q-iYpqj07fED%>tT%N'_),X1k>/)clKh"q>SH*Ic$'LlLdd2#4=`9b&(pfO4JkDb6%QgI(Y'j/=O(li5,FOAA,:D0C\crN/f#Fd[`qZjqN`;,[42=B>?1%W>+4fq+\UMgg.\dSU\EHDJN[krp0Sk97+TpYJ)ue_RlOX7HR[+XXp?O/D?t+q"(agGk^CQaMNBq[b^2F:=aa`79=>t>W0LTNJe-8%rm?0R[U"hLWp.8`4j("=C;A7iaq*QJrp+FN4i:1RO)i@!T=p-u-[p^mYjo_^&33`RJQVN=n$J:6\Jc&CX4sj^8BFk)^R91uM&0Kq%Gr,AW+^%7Hm^:99De`Ip]9kMa2p@qo*el"gq>8l`f#_khs-)[hB0Z.2g!BV:p(EMd`n?]aTDc"IDT"Hf/PY20H\"?h-gP%,c=B2+%'dO$!m;.U@kG"3"Z1B7+fls57QMVso[mc%Mqn1s-3re$*;,)]n\"kt.rl+0IYT;K"2KR>Gh(t"45>(.Hg=FN^!6`(67p9qkV\n`;%HL])PVAI92]aQ`P;>1K/h+]Q9]t/',EGX*^?WB!9Sme^iH]`6db.3X]!LA'MrE"\nMl.EXDL*0O5.TpsYtZms^tZ5@L9^/j1mRGT%dJ5dg9V-rcqD8Un=Io7,Gaq%=k4fRjRa3Z'<ToLgG\1_g_%Seem<c7+f#_q2bAmC%EVB'9p@VtiF2+>q1S3K9p)?rpd+2*8!dd:k%_.9+#E2Z\nBIF$'a)!/$.N?Nb=br])Z?<g%A,k15AbD[Thi,0d56obB@TVD&V\na^*SL<c=63b=j^.f*P2UG>V\n`;H5UPfDL*21%T*+D)&k(P3N-.(mFN/d^o\s!@V(DP,8_-&BU2KCq327\l!c6?/aIh@K\n;lGDL/9@ik97k0kf$+iAhH,cS/>[KBm`h+Rc4MNat8?%W$T9e0r8SANO1&nVJ-(QBj+@@Bj,0T8QsPDD+5`tBh8SM&MK+-=7T=ccYe;mp8!q:Zl6q^(7T(ICV-'->'7R)q,tt0N%$b[!_$-2%`6.A+\2cQBY5W"Sa]Zk.7:)9J&EKI)?5@EsOdFU[0dUDqT/e.>ruI?Yp8:&g1A.[D95[MF)WY`hk?T).$/Saq@YVPAYTA"EI3Ot.%)70L&=;#Z'-U/qe@GN+>/$C5Te=mWnMCft`9DVjA!QrMW+iR%U:9$*<7Q]=F,$#`N6(E4&[Di1tkUYd;MM4/DM+Lq3Gcn)q9#7Mj%,hEk1>7(8Z#@-CsadX9IKA`^K9NBj1ndi0'q"K$n@j3[2#m@eM8Z[obTIqV/gLa]E89YqQW]iH!$Mm.UFf0'IWm3<%G`l`?r;eu-%>#d6_QtSo]_A&2EDjY2QV3#?oh2Xn(L/_(Zk#of'C>C&Z9&:P0].qV=7OdM'M=[CPRMf'K2f"7@(okB?2%nk&bt>j>$6[MAD/Nrg%d0)/Hb%sJILt`L'=8BTU\I+'?P,fj=l,q*..e3"E%?WR!L?m#M,kb8HeZC`nX(9?!hcA<p'DW`6X-0;faq3qBdu%g+@NE>60L[E_%+cRpS6F'PD0MI>_[URsTDnPjlUq%#[m7]>=3tn0=SV\N+cGZsa4Kn`Fk>UW[EF"N9'5Nra($SLLLuP79eefcc,ZnLhe:nEP;>-`q%S;;*Q8%#Z\LHI&3GEfOW*gQ(]%>$?fW#BF]s*U@nD=l_I39BJCZmf,o*@?uIKK,Z`c?(J.MG.@"O][pbVPr,,UiPH&P,?[\`M=sJ%*L!A!RnT8C)B;[^K%<k?H3T5Hg7I^2S<Kg"M.4TM!@uC>gr]!X3Ftff;S*`$@nPUuXLgKi6G=(-I4-rdVSqaNSeL>RUh2'ok@Q4I%B`F)TWOcQu4CRo<TU@!(4Z3m$;Y'TmF/HE'HRHmqOpN&=$(4S3Eifg^Zt=?-'[>F'>U<aD&l'4d*:oqMUbP)kLK1ED*,2Z[/;=!M%H#j-@bLXj>NB'-O[`f_[mp%V%&;8ao6WeGl&3:<o#Z_l<'H)PX9m\nRaN*A?f]))9;)kn'E`=!Fg9-qc-'ia0^Qlo<ad6RZ<5tk'%C;k7/</h,/VFG-u$bt-9X2*X/0aHtDj>$#aGta*Q("ag$ohO)^8Q!9D;H,joMn3O<l^f@j\aPu.U4`Um]#U&6l7?1P6oAhtSmb)&%1l)H8Y'H-ed_tI+1@h+aSto^*A58$K;#Nd(o:b4K)>0(%"Z%.o:cNM?+,X(boiKp#lO$3Y@`c'o$BlI^d+t?pc%F`G5Rlhp:;k5(%C0G&<04Y::i*.?[TSD)kb^bRKaFG2q=C_>oFQRq<q+lXt$)YkdE7K%br@)#PRHdbB^3R?0bZHY!WO6;,RH[L7k9hdDT*B88RJ\lU%<s7SJ%<TUXqW(I`5"RPg,F0i*?(#aIR849uYCA=*8`G3G+!T9?K('Z*:pS&@.2&96"C8Y]&taF"LC1p@@,_hQD+o:kC-K2`CaNV0%9sR<+_Hej.4is8"]&68HPo>4T-Zam,nAHgd':p])*r/Pb1-+5@9N&aO%,;mU__Ko&-=`P31u\ie>XqS4E]4gWZBZ]4-/\>?Z"&]:%qM4mY-rmjg`0m&b.a[74MbUL>E3C5J_k4T;i2aPB%#.kI3r.WWRt2#r1`b*$-f"!5f1KXGajnL*F`?>SSQ>OUZ`/fD`7SXF^9MtQ%%cUj:mI36K@,FRX4mk+@j'k.KaD!ur9+S,k)jW7A$m!oto@XYJ.AcWO>Jk8Ff)&;!?EV"+bsE.(J%.*iaLCAb7U1pQf",6trZVe%%8g0%(kcmWJFB<@-LQ8<5bW$,^nW7HfrY9>"=:<6Y_L:+.%*bMD[2QXB8Bd8U0G9Socp>]5Il5]8c,q9l5a)D3VV0FpY^TD\4Z%dJ%^!tZ&-=m9_+fimPSkMBr\oRO)[_O^D`C`n@aa<WM\_nTs6-ct`F)Ud!c,g)Q,7]g:V17TS;eh]noh;6m?<B?4K?%nKY>Y7HjQi/S%E?hsASV*AUoId?O.$J*o".$a.X8In'*Vpi5BooG),LGh>!F_FM<WDW.ZrCJof!q8H+\LYaF:K(Pb!lqh_P:6,HKR6Z*[g$%TM!p-%aB`mh9`R+I'f$l98qWV-[S8_K^C]V[)*O!VHu%ss\lsM\Mli\f*)(imWU5b"?&k@8RQ3g]Tq%elOiCAl$q&R/"L[a,"*=3"1=6R3%DW<`7%IX?l9p9FK2_UqFGn_E"e*o%&WG-\UNP%*_*Cj"rrAud_i0Him%6BK-1nG,3+<Ue!$#+8Jn]X?=R@IPm8j9:SrdtfFKFRJ5%D/Z.X%s]L*p&(eZM2%s1A>4oU(kQB6@BlRK1=75Sa@)e%^eD,r3d;uTPd+i&CM'-f*oZpJKi<*?RU[[J"LoWhN=4$*[$n_7Djb8N%o8-/J."t@%b&?ep'2A>pXj0VI3iA2u@HZW_!$#uGQBT\RM)#B3iaQCi5ss]Ab%tG+BDPcu;s'Jc.o/4,IEFM?C7]8X;9G]L'j?8Q%165<[+=SD;#n;5;1Q;!50UEG]D,\^)A!E,0OA#jWc'"5DeZ@bop.R?EISYl$ZZlJ0<&=9C,<N!dB-[NrbU`lN\P&Ne3EP\j*XQEa%%-@[KWYZ>m4N835ASt4_H5S?YYs<7kR9`ip5?X?q+I:>W/ibO$M.O&ACOS$uKW?et9*>a`(,K6jXsojAqJTZ`.F.3NSRS&%&!0D<%%2K76_F[6\Ulq.Rb_]l4So7p\P)5*,k%8$upH%K!_68n>10O\?O<ltcdp'&C.Nq@;oZSHlhp'0b'Jb/]MS'>/MPS"b:m$_($gmr3%22JeQ%,<O\9VQ2MrK-H'fQ#u4aX(^rR:GW&s$_km6F?6"R;4$L8fOfUj=h\8\remO#7LlP@rb_]cB'r=""pL2l&XpK(JOO"5AgL:%,dI?A:\ZXQ-B-If7X^:pIY],o.*aRnN90X@$"GO*KJCR^Z`TQB!/:;k!+^8?\Q6+7o#$2-OOM/[N/i"bY_%6!Gr`./a)j%uK2ELF%=GO0R0TdSRN]VYH/##hUIGia*]mD0O(6^qd(*0%Ed9ROiEfmIY!VfsE(5l'`C2#'6kV"b0@1).J@Gh1)lnUJr9JIjNV*$ImKu.YO%*8JlkfMDZTU*[/f^),8:o_=7_0naHi7gtk7kD2!3JOZnY-aQ[SEO6f%@%/AVC2ogiLAOrq&`Xmi3F_E;0LIBa*uSN&E=6B7<W+Wk%VMG!?,%l\i;(2"B`:]\08B'g,csk<6O`GPqn51C[42DJFc3[YqA]R]NMB&j!N!!M5,>reo&$0uU0h%&*"2\Fl9KuIm?i_Ju/.<.h%_@SiR.:G)HK8G"4aWVT38BqF_V-N"#A;+hR0i*o$RWN1^QZ!2TclnP[P;I0XQ^8@k4m%?M(9<aN(K,>q(:#iTab:Ms6:=_tYd*c*%M-qiO0H@Nhd)L!#X7MTi_0,+IO2LfXq9]01ci&Z:ps<^V4$kcZP.7@*pN$[*?R/^C5kp=U/!J'$MBJp5ror@k+#=d<B&fL+8n22s%)52^XApSB:h(t"45K`1t->1fN^i.$nf%XW@C%2UAh+]OC;rsamNp.\)lG@INZL/SGF`T3Y3mbp(D0d)i8W-RB%%C#Uj8.32T*qkt%0E)!29oEXd4e[qgju;Ykj2>skiiqn8e`YR'o^VB\+kP#PO)-,>1%J:O&^E(Y='N/WPVH9sFgP,2YS*uMoWj`a$f3r=A,BTWUis%k%LBUdT(19.*JGMK8J7[Ng8mkk-)7.uM8rP-5hHFfY4pkf1-JGjF9.uO3jbcPs>"d!/Q,DX%>K^U>%j,c?_")4no($%o2X;&eh7P8)%amKV-?7%!Y"QgdBfsH!YZ0nJ*BAdTPEGX)sa00;Kh(t"4F"d*`M>^\0j^.G5Qe^RL[[a->)E2T(b"$9s90K'nSn#Z0>,'Bdp1]B%%E\Gmf83oAWU@(PBD1T`:7nS"(p/RAW'tIXa#.RpN7XsSVi&6*h4S!G1[E^I*r8MJ<%OBM15Og%6"`hSJ5B#T.g'(ue(#Jn'Ko\gi%O2mDYf71L-Fm/>3[M\i"iDhP'jm)_#Y^RR17Rcf8VS3o\kdc1\jBXS7^O?Ue4jBd-lQUMD#;7\>S1scH][#C\TU%-1#Nf83lDgkU%ZtQq6mqlY3;jO_p`E$#hfQ!;1[^(Ohp"Iu#^2EGXXfR#:07H$\N9Nhhm?m/5X*c^ee.,K`YknX>kClo"V!obc_QKF_,HuW%!n".H%6`]S5+/R43)]ujejbc&;[jQ=-.N9u)b'nL+gtan^q54JtrT3_DD#hnqpA'=G^]!fBc`WmWPA5T\s7!joT76Rn^[:K6^\mHi^Z"Vt%Y%Ua%7,@N_+'qYOgps'3]lUsC[-W:?[M@K&Icp\<m=3lPT"OsbB:iK@9;`7!4Td=ol[\`35@VG&?G=!lpW`7-X.Oicn,:!aq#%$S%]t/:J2t)7oi1E2_s-)1BT3m$E`V]].i;3CJ5Q0rlpV2+FkOpR\++O:JMq7NQlS&89ZbHjqWhB-X40SY[[B'<82P@:P~>%AI9_PrivateDataEnd