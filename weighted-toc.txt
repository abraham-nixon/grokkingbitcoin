Some sections are marked with *. That marks
the key sections, which are the hardest parts
of the chapter.

Before each chapter is a "Depends" line showing
what previous chapters this chapter depends on.

2	1. Introduction to Bitcoin
2	1.1. What is Bitcoin?
2	1.2. Problems with money today
	1.2.1. Inflation
	1.2.2. Borders
	1.2.3. Segregation
	1.2.4. Privacy issues
3	1.3. The Bitcoin approach
	1.3.1. Decentralized
	1.3.2. Limited supply
	1.3.3. Borderless
2	1.4. How is Bitcoin used?
	1.4.1. Savings
	1.4.2. Speculation
	1.4.3. Non-currency uses
	1.4.4. How is Bitcoin valued?
	1.4.5. When not to use Bitcoin
5	1.5. The big picture
	1.5.1. Step 1 - Transactions
	1.5.2. Step 2 - The Bitcoin network
	1.5.3. Step 3 - The blockchain
	1.5.4. Step 4 - Wallets

7	2. Digital signatures - Securing Cookie Tokens
6	2.1. Cryptographic hashing
	2.1.1. Illustration of "very hard"
	2.1.2. Exercise
3	2.2. The cookie token spreadsheet
7	2.3. Digital signatures
	2.3.1. Preparation: John generates a key pair
	2.3.2. John signs his payment
	2.3.3. Lisa verifies the signature
	2.3.4. Exercises
	2.3.5. Summary
6	2.4. Private key security
	2.4.1. Against attackers
	2.4.2. Against yourself
	2.4.3. Exercise

6	3. CT addresses - Resolving privacy issues
3	3.1. Cookie eating habits undisclosed
	3.1.1. Replace names with public keys
	3.1.2. Interesting side effects
5	3.2. Shortening the public key
	3.2.1. Hash public key to 20 bytes
	3.2.2. Interesting side effects
5	3.3. Expensive typing errors
	3.3.1. Add version and checksum
	3.3.2. Use compact encoding
6	3.4. Summary of the address creation process
6	3.5. Bitcoin addresses
5	3.6. Privacy problem with reused addresses
	3.6.1. Single-use addresses
5	3.7. Exercises

	4. Wallets - Fixing key chaos and manual work
5	4.1. Single-use keys require automation
	4.1.1. Automate address creation
	4.1.2. Manage key storage
	4.1.3. Easy transfer of CT addresses
5	4.2. Automate messages to Lisa
	4.2.1. The wallet will automatically email Lisa
	4.3. The wallet gets adopted
	4.3.1. CT becomes easier to use than dollar bills
	4.3.2. Multiple wallet implementations
6	4.4. Backup hell
	4.4.1. Needs to backup every new private key
	4.4.2. Security decreases
7	4.5. Hierarchical deterministic wallets
	4.5.1. Seed
	4.5.2. Generate a tree of keys from the seed
	4.5.3. Backup the seed once
	4.5.4. Independent public part of the tree
5	4.6. Exercises

	5. Transactions - Reducing trust in Lisa
3	5.1. Problems
	5.1.1. Lisa hates calculating balances
	5.1.2. Can’t spend small balances
	5.1.3. Only Lisa can verify signatures
	5.1.4. Fading trust in Lisa, she can steal money
7	5.2. Solutions
	5.2.1. Standard transaction format
	5.2.2. Change
	5.2.3. Place signatures in transactions
6	5.3. Unspent transaction outputs
5	5.4. Lisa automates her work
5	5.5. Exercises

	6. The blockchain - Further reducing trust in Lisa
5	6.1. Lisa rewrites history
8	6.2. Coworkers propose a blockchain
	6.2.1. Lisa publish blocks every 10 minutes
	6.2.2. The blocks are cryptographically chained
	6.2.3. Nodes - Independent validators
	6.2.4. The blockchain becomes more trusted than the spreadsheet.
6	6.3. The spreadsheet is obsolete
5	6.4. Exercises

	7. Cloning Lisa - Spreading risks
4	7.1. Lisa censors payments
4	7.2. Lisa’s computer breaks
	7.2.1. People can’t buy cookies
	7.2.2. Lisa gets a new computer
6	7.3. Avoiding future catastophes
	7.3.1. Ali also becomes trusted payment processor.
	7.3.2. Who publish blocks?
	7.3.3. Block race
6	7.4. Ellen also joins
	7.4.1. Increased block rate
5	7.5. Exercises

	8. Proof-of-work - Avoiding double spends
7	8.1. Reemerged problems
	8.1.1. Lisa can rewrite history again
	8.1.2. Lisa double spends her CT
7	8.2. The Byzantine generals' problem
8	8.3. Proof-of-work replaces random numbers
	8.3.1. Hash the blockheader
	8.3.2. Most proof-of-work chain wins
7	8.4. Case study: Rewriting history
	8.4.1. Diminishing probability of success
5	8.5. Exercises

	9. Block rewards - Incentivize work
4	9.1. Problems
	9.1.1. Electricity bill sky rockets
	9.1.2. More cookie tokens needed
9	9.2. Solution
	9.2.1. Company refuses to pay for security
	9.2.2. Reward nodes running PoW at home
	9.2.3. Reasonable supply curve - 21M target
7	9.3. More problems
	9.3.1. Miners create empty blocks
	9.3.2. Transactions get stuck by miners
7	9.4. Solution
	9.4.1. Transaction fees
	9.5. Exercise

	10. Difficulty adjustments - Allowing more participants
4	10.1. Ali beefs up his hashpower
4	10.2. Lisa beefs up her hashpower
6	10.3. Block rate increases
	10.3.1. Increased chance of stale blocks
	10.3.2. Moving target
8	10.4. Adjust difficulty every 2016th block
	10.4.1. Block rate stabalizes
	10.4.2. Opens up for more participants
5	10.5. Exercise

	11. Peer-to-peer network - Ditching email
4	11.1. Email server breaks
	11.1.1. Nodes cannot get new blocks
	11.1.2. Users cannot verify payments
5	11.2. More problems with the email server
	11.2.1. Bandwidth bottleneck
	11.2.2. PoW authenticates, not email server logins
7	11.3. Faiza designs a peer-to-peer network
	11.3.1. Nodes, miners and wallets interconnect
	11.3.2. Transactions and blocks in the network
7	11.4. Anyone can mine now
	11.4.1. Faiza, Mia and Rick starts mining
	11.4.2. Network hashpower sky-rockets
7	11.5. System is now truly decentralized
6	11.6. Transaction life-cycle
5	11.7. Exercises

	12. Merkle trees - Reducing data use
4	12.1. John’s mobile data plan depletes
	12.1.1. All blocks downloaded
7	12.2. Download only blocks concerning John
	12.2.1. By giving up privacy
	12.2.2. By bloom filters
8	12.3. Download only transactions concerning John
	12.3.1. Prove block contrains transaction
	12.3.2. Merkle tree
	12.3.3. Merkle path
7	12.4. Privacy issues with Bloom filters
7	12.5. Pruning
5	12.6. Exercises

	13. Script - Transactions on steroids
3	13.1. John’s daughter wants cookie
6	13.2. Wanted features
	13.2.1. Lock CT 24 hours
	13.2.2. Pay with secret
	13.2.3. Anyone can spend
	13.2.4. Attach arbitrary data
	13.2.5. Multi-signature
8	13.3. Scripts got you covered - if correct
8	13.4. Pay to script-hash - Move cost of script to payee
7	13.5. LockTime and nSequence
9	13.6. Segregated Witness
	13.6.1. Ellen spends unconfirmed transaction
	13.6.2. Transaction malleability
	13.6.3. Space savings
	13.6.4. Implicitly changes transaction id
	
	14. Adoption craze - Let’s just call it Bitcoin, shall we?
5	14.1. No barrier to entry
5	14.2. Cafe starts serving bypassers in the street
	14.2.1. Sells bitcoins to anyone
	14.2.2. Accepts bitcoins from anyone
4	14.3. Employees exchange Bitcoin at a party
5	14.4. Non-employee starts mining
	14.4.1. Buys coffé at café
	14.4.2. Sells Bitcoin on the street
5	14.5. Speculators buys bitcoin
	14.5.1. Long term speculators
	14.5.2. Short term speculators
5	14.6. A free-speech non-profit gets choked
	14.6.1. Only way to receive donations is Bitcoin
	14.6.2. Manages to continue operations
5	14.7. Some employees want part of their salary in Bitcoin
5	14.8. Consultant accept Bitcoin as payment
6	14.9. Exchanges
6	14.10. Traders

	15. Update - Fixing bugs and adding features
7	15.1. Add script to transactions
	15.1.1. Hard fork - Split network
	15.1.2. Typical case - catastrophic bug
7	15.2. Add segregated witness
	15.2.1. Soft fork - Upgrade mercifully
	15.2.2. Typical case - new feature
	15.2.3. Standardized procedure for soft fork

	16. Genesis - How it all began
5	16.1. The paper
5	16.2. The software
6	16.3. The genesis block
6	16.4. The first transaction
6	16.5. The first price point

	17. How-to - Getting started with Bitcoin
5	17.1. Install a wallet
	17.1.1. Chose a wallet
	17.1.2. Optionally encrypt the wallet
	17.1.3. Backup the wallet
5	17.2. Get bitcoins
	17.2.1. Watch the transaction confirm
5	17.3. Send bitcoins
5	17.4. Create a multi-signature wallet
